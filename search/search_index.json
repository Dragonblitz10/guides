{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GalaxyGate Guides","text":"<p>This Website is a place where users can submit guides for server administration, bot management and everything related.</p> <p>If you want to contribute, please head over to our GitHub.</p> <p>If you would like to join our discord server, please use this invite code discord.gg/VuXXeqEymc.</p>"},{"location":"basics/","title":"Index","text":"<p>Welcome to the Basics section of the GalaxyGate Wiki.</p> <p>This section contains the basics of Linux VPS administration, from creating a user to fixing common issues.</p> <p>On the left, you can find a list of all available guides. We suggest you start with Login (Linux).</p>"},{"location":"basics/first_login/","title":"How to login (Linux)","text":""},{"location":"basics/first_login/#introduction","title":"Introduction","text":"<p>GalaxyGate servers can be managed by using an SSH client or SSH via terminal.To connect to your server, you'll need to open a terminal. How you do this varies between operating systems, but generally for the following operating systems:</p> <ul> <li>Linux: Search Terminal or press CTRL+ALT+T.</li> <li>macOS: Search Terminal.</li> <li>Windows Git bash: Git for windows comes with SSH.</li> <li>Windows SSH Client: You can download an SSH client like Bitvise. (see this section)</li> </ul>"},{"location":"basics/first_login/#using-terminal","title":"Using terminal","text":"<p>Once the terminal is open, enter the following command. Make sure to substitute in your server's IP address after the <code>@</code> (<code>192.198.93.134</code>) should be your server's address.</p> <pre><code>ssh root@192.198.93.134\n</code></pre> <p>when you login the first time, the server isn't identified on your home machine, so you'll be asked if you're sure you want to continue connecting. You can type yes and then press ENTER key.</p> <p></p> <p>After clicking enter a host key fingerprint is saved to your local machine and you'll receive this confirmation:</p> <pre><code>Warning: Permanently added '192.198.93.134' (ECDSA) to the list of known hosts.\n</code></pre> <p>Asuming you don't have SSH keys added you will see this hopefully:</p> <pre><code>root@192.198.93.134's password:\n</code></pre> <p>When you enter your password, nothing is displayed in the terminal this is to prevent visual hacking, so it is suggested to paste in the initial password. Pasting into terminals is different on each platform:</p> <ul> <li>Linux: use CTRL+SHIFT+V.</li> <li>macOS: use SHIFT-CMD-V or the middle mouse button.</li> <li>Windows Bash: right-click on the window bar, choose Edit, then Paste. You can also right-click to paste if you enable QuickEdit mode.</li> <li>Windows CMD: If you are using CMD use Ctrl V.</li> </ul> <p>Once you've entered the password, press ENTER.</p>"},{"location":"basics/first_login/#remote-host-has-changed","title":"Remote Host has changed","text":"<p>You may happen to encounter this in your life: This usually happens when you reinstall the OS and use the same IP, this just means that your local machine notices that the host key has changed and someone may be snooping in as the local machine expects the old host key. If this happens, you can delete the old server's host key from your local system with the command ssh-keygen -R 192.198.93.134 and then reconnect. </p>"},{"location":"basics/first_login/#using-an-ssh-client","title":"Using an SSH Client","text":"<p>Bitvise is a good SSH Client to use due to fact it has a built-in terminal along with a built-in SFTP client which is useful for transfering files without the use of git/CLI. You can download it here.</p>"},{"location":"basics/first_login/#inputting-the-details","title":"Inputting the details","text":"<p>You will see an GUI like this when you first open Bitvise.</p> <p></p> <p>You will want to fill in the fields with the credentials you were given in the welcome email. </p> <ol> <li>Enter your vps IP in the hostname field, this starts with 144.</li> <li>Put <code>root</code> as the Username .</li> <li>Click on the dropdown and select Password.</li> <li>Make sure <code>Store encrypted password in profile</code> is ticked.</li> <li>Type in the password, this was either emailed or set by you on purchase.</li> <li>Hit save profile.</li> <li>Hit Log in.</li> </ol> <p>When you hit <code>Log in</code> and the correct details are entered you may notice this for the first time, just hit Accept and Save. </p>"},{"location":"basics/first_login/#how-to-use","title":"How to use","text":"<ul> <li>Highlight text to copy.</li> <li>Right click to paste.</li> <li>Ctrl C and Ctrl X can be used to exit certain screens.</li> <li>Commands typed here are executed on the VPS.</li> </ul> <p>Bitvise's SFTP client is used to transfer files, a local and remote side is viewed, to transfer files just move them in somehwere remote/local area. </p>"},{"location":"basics/fix_hostname/","title":"Unable to resolve host","text":""},{"location":"basics/fix_hostname/#introduction","title":"Introduction","text":"<p>You may notice when you run sudo or any commands that you may see a small message that comes and says \"Sudo: unable to resolve host\", this means that the hostname doesn't match what was defined in the hosts file, this is a simple fix that will be explained and listed below.</p> <p></p>"},{"location":"basics/fix_hostname/#how-to-fix","title":"How to fix","text":"<p>First, you should check the hostname file and see if that matches the hostname you have set. </p> <pre><code>sudo cat /etc/hostname\n</code></pre> <p></p> <p>You can also see the hostname as it comes after your username e.g root@Helios. Keep the output of the previous command as you will be using that in the next step!</p> <p>Next, we will be checking the hosts file to make sure that the vps knows what the new hostname is.</p> <pre><code>sudo nano /etc/hosts\n</code></pre> <p>The default file would be this or a similar looking one:  You want to edit it to resemble this: </p> <p>Note</p> <p>In my case it was Ubuntu -&gt; Helios</p> <p>To exit from nano use Ctrl + X and Y to save the edited text.</p> <p>Tip</p> <p>Don't fancy using nano? you can use the command below.</p> <p>sed -i 's/ubuntu/newhost/' /etc/hosts </p> <p>If host is not ubuntu replace ubuntu to whatever it was shown.</p>"},{"location":"basics/sudo_user/","title":"Creating a Sudo user account","text":""},{"location":"basics/sudo_user/#introduction","title":"Introduction","text":"<p>The sudo command allows you to run programs with the security privileges of another user (by default, as the superuser). It prompts you for your password and confirms your request to execute a command by checking if you are allowed to use sudo or not.</p>"},{"location":"basics/sudo_user/#creating-a-new-user","title":"Creating a new user","text":"<p>Using the adduser command you should create a user account for the Linux vps you are on.</p> <pre><code>adduser username\n</code></pre> <p>Warning</p> <p>Be sure to replace username with the user that you want to create.</p> <p>You then want to set a password which you will need to type twice, keystrokes aren't logged for security purposes so do not be alarmed if you do not see anything happening on the screen.</p> <pre><code>The set password prompts:\nEnter new UNIX password:\nRetype new UNIX password:\npasswd: password updated successfully\n</code></pre> <p>After setting a password you will be asked to fill in some basic user information, this is completely optional so you can just click enter a couple of times!</p> <pre><code>User information prompts:\nChanging the user information for username\nEnter the new value, or press ENTER for the default\n    Full Name []:\n    Room Number []:\n    Work Phone []:\n    Home Phone []:\n    Other []:\nIs the information correct? [Y/n]\n</code></pre> <p>Warning</p> <p>Make sure to type in <code>Y</code> and click enter otherwise you will have to redo the user information prompt!</p>"},{"location":"basics/sudo_user/#granting-user-sudo","title":"Granting user sudo","text":"<p>Now we have added a user that you can log in into via ssh, it is now time for us to allow the user to use sudo. We will be using the <code>usermod</code> command to add <code>username</code> to the <code>sudo</code> or <code>wheel</code> group.</p>"},{"location":"basics/sudo_user/#debian-based-debian-ubuntu","title":"Debian Based (Debian, Ubuntu)","text":"<pre><code>usermod -aG sudo username\n</code></pre>"},{"location":"basics/sudo_user/#rhel-based-rhel-centos","title":"RHEL Based (RHEL, CentOS)","text":"<pre><code>usermod -aG wheel username\n</code></pre> <p>Now we will test that if the user we have added is allowed to use sudo or not. Use the su command to log in to the username you have selected.</p> <pre><code>su - username\n</code></pre> <p>As you want to check if you have sudo you should run the command below to effectively test if you have sudo or not.</p> <pre><code>sudo ls /root\n</code></pre> <p>Since only root can read that directory you would require to be either root or have sudo to access the directory.</p> <p>Response if you have sudo:</p> <pre><code>user@server:~$ sudo ls /root\n[sudo] password for user:\n\nfile1 file2 fil3\n</code></pre> <p>Response if you don't have sudo:</p> <pre><code>user@server:~$ sudo ls /root\n[sudo] password for user:\n\nuser is not in the sudoers file. This incident will be reported.\n</code></pre>"},{"location":"extras/","title":"Index","text":"<p>Welcome to the extras section of the GalaxyGate Wiki.</p> <p>Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server.  If you are not familiar with linux, you can check out the basics here.</p> <p>On the left, you can find a list of all available guides.</p>"},{"location":"extras/tools/using_nvm/","title":"Using Node Version Manager","text":""},{"location":"extras/tools/using_nvm/#introduction","title":"Introduction","text":"<p>Node Version Manager (nvm) is a version manager for node.js allowing you to choose what node version to use and install.</p> <p></p>"},{"location":"extras/tools/using_nvm/#installing-nvm","title":"Installing nvm","text":"<p>First of all, let's start by updating and upgrading everything.</p> <p>You can update and upgrade everything by running the following:</p> <pre><code>apt-get update &amp;&amp; apt-get upgrade &amp;&amp; apt -y install wget\n</code></pre> <p>After that, Run the following to install:</p> <pre><code>wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash\n</code></pre> <p>After that finishes running, run the following:</p> <pre><code>export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] &amp;&amp; printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] &amp;&amp; \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n</code></pre> <p>This will load nvm and let you use it.</p>"},{"location":"extras/tools/using_nvm/#using-nvm","title":"Using nvm","text":"<p>In this example, we'll be installing Node v16. To install, just run the following:</p> <pre><code>nvm install v16\n</code></pre> <p>Should look like this:</p> <p></p> <p>If for some reason it doesn't start using it automatically after installed, run this:</p> <pre><code>nvm use v16   \n</code></pre> <p>If the version isn't available it'll provide an error saying to install it. That should conclude the install and how to use process.</p> <p>Usage of nvm can be found here.</p>"},{"location":"extras/tools/using_nvm/#resources","title":"Resources","text":"<ul> <li>Git Repo</li> </ul>"},{"location":"extras/tools/using_tmate/","title":"Using tmate (Collaboration tool)","text":""},{"location":"extras/tools/using_tmate/#introduction","title":"Introduction","text":"<p>tmate is a clone of tmux (terminal multiplexer) that provides a secure, instant and easy-to-use terminal sharing solution over an SSH connection allowing you to share terminal access without giving away SSH credentials or adding an SSH key.</p>"},{"location":"extras/tools/using_tmate/#installing-tmate","title":"Installing tmate","text":"<p>Let's start by updating and upgrading everything Run the following to update and upgrade everything:</p> <pre><code>apt-get update &amp;&amp; apt-get upgrade\n</code></pre> <p>After that, run the following to install the latest version of tmate available: </p> <pre><code>apt-get install -y tmate\n</code></pre> <p>That should install the latest tmate version available on the mirror you're using. If it errors, try doing the following:</p> <pre><code>apt-get install -y git git-core build-essential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev automake libssh-dev libmsgpack-dev\ngit clone https://github.com/tmate-io/tmate.git\ncd tmate\n./autogen.sh\n./configure\nmake\nmake install\n</code></pre> <p>Now that tmate is installed, let's get to how to run it.</p>"},{"location":"extras/tools/using_tmate/#using-tmate","title":"Using tmate","text":"<p>This step is quite simple, all you have to do is run the following:</p> <pre><code>tmate\n</code></pre> <p>All you have to do after you run that is copy which session you want to share and send it to the user you're wanting to share it with.</p> <p></p>"},{"location":"extras/tools/using_tmate/#resources","title":"Resources","text":"<ul> <li>Website</li> <li>Repo</li> </ul>"},{"location":"games/","title":"Index","text":"<p>Welcome to the Game Hosting section of the GalaxyGate Wiki.</p> <p>Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server.  If you are not familiar with linux, you can check out the basics here.</p> <p>On the left, you can find a list of all available game guides.</p>"},{"location":"games/minecraft/bedrock/bedrock/","title":"Hosting a Bedrock Server","text":""},{"location":"games/minecraft/bedrock/bedrock/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a Bedrock Dedicated Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/minecraft/bedrock/bedrock/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"games/minecraft/bedrock/bedrock/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen unzip curl -y \n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/minecraft/bedrock/bedrock/#creating-a-user-for-minecraft","title":"Creating a user for Minecraft","text":"<p>For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later.</p> <pre><code>sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the Minecraft user.</p> <pre><code>sudo su - minecraft\n</code></pre>"},{"location":"games/minecraft/bedrock/bedrock/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir bedrock\ncd bedrock\n</code></pre>"},{"location":"games/minecraft/bedrock/bedrock/#getting-the-files","title":"Getting the files","text":"<p>Download the files required to host the server as well as unzipping them using the command provided below.</p> <pre><code>wget https://minecraft.azureedge.net/bin-linux/bedrock-server-1.20.15.01.zip -O server.zip\nunzip server.zip\nrm server.zip\n</code></pre>"},{"location":"games/minecraft/bedrock/bedrock/#starting-the-server","title":"Starting the server","text":"<p>Use the command below to start the server, please make sure you are in the same directory as the files are located in.</p> <pre><code>LD_LIBRARY_PATH=. ./bedrock_server\n</code></pre> <p></p>"},{"location":"games/minecraft/bedrock/bedrock/#connecting-to-the-server","title":"Connecting to the server","text":"<p>You should grab the IP of your server which can be found using the command below if you do not know it.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open Minecraft up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.</p> <p></p>"},{"location":"games/minecraft/bedrock/bedrock/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/minecraft/bedrock/bedrock/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/minecraft/bedrock/bedrock/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the Minecraft account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the Minecraft account <code>sudo su - minecraft</code>.</p>"},{"location":"games/minecraft/bedrock/bedrock/#usage","title":"Usage","text":"<p>Install the required files.</p> <pre><code>echo \"LD_LIBRARY_PATH=. ./bedrock_server\" &gt;&gt;  Server.sh | chmod +x Server.sh\n</code></pre> <p>You can then start your server by using the command below:</p> <pre><code>screen -S Bedrock -L ./Server.sh\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave.  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r Bedrock</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/minecraft/bedrock/bedrock/#systemd","title":"Systemd","text":"<p>Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.</p>"},{"location":"games/minecraft/bedrock/bedrock/#installation_1","title":"Installation","text":"<pre><code>exit\n</code></pre> <p>Once you are root we will start by creating a service file called <code>minecraft@bedrock.service</code> in <code>/etc/systemd/system/</code>.</p> <pre><code>nano /etc/systemd/system/minecraft@bedrock.service\n</code></pre> <p>Next, a screen like this will show up, you will fill it up with the config provided below.  Use this config.</p> <pre><code>[Unit]\nDescription=Bedrock Minecraft server\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=minecraft\nWorkingDirectory=/opt/minecraft/bedrock/\nExecStart=/bin/bash Server.sh\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Hint</p> <p>To exit out of nano, use Ctrl + X and hit Y</p> <p>Run the commands below to test and start the server</p> <pre><code>systemctl daemon-reload \nsystemctl start minecraft@bedrock.service \nsystemctl status minecraft@bedrock.service\nsystemctl enable minecraft@bedrock.service\n</code></pre>"},{"location":"games/minecraft/bedrock/bedrock/#usage_1","title":"Usage","text":"<p>Here are some commands that will help you effectively manage the service. Start service:</p> <pre><code>systemctl start minecraft@bedrock.service \n</code></pre> <p>Restart service:</p> <pre><code>systemctl restart minecraft@bedrock.service \n</code></pre> <p>Status of service:</p> <pre><code>systemctl status minecraft@bedrock.service \n</code></pre> <p>Stop service:</p> <pre><code>systemctl stop minecraft@bedrock.service \n</code></pre> <p>View logs:</p> <pre><code>journalctl -n 50 -f -u minecraft@bedrock.service\n</code></pre>"},{"location":"games/minecraft/bedrock/bedrock/#resources","title":"Resources","text":"<ul> <li>FAQ</li> <li>Download Page</li> <li>Issue Tracker</li> <li>Wiki</li> <li>Reddit Tutorial</li> </ul>"},{"location":"games/minecraft/bedrock/nukkit/","title":"Hosting a Nukkit Server","text":""},{"location":"games/minecraft/bedrock/nukkit/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a Nukkit Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/minecraft/bedrock/nukkit/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"games/minecraft/bedrock/nukkit/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen unzip curl -y \n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/minecraft/bedrock/nukkit/#creating-a-user-for-minecraft","title":"Creating a user for Minecraft","text":"<p>For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later.</p> <pre><code>sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the Minecraft user.</p> <pre><code>sudo su - minecraft\n</code></pre>"},{"location":"games/minecraft/bedrock/nukkit/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir nukkit\ncd nukkit\n</code></pre>"},{"location":"games/minecraft/bedrock/nukkit/#installing-java","title":"Installing Java","text":"<p>Run the commands below on the Minecraft user we created above.</p> <pre><code>curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash &amp;&amp; . ~/.jabba/jabba.sh\njabba install openjdk@1.14.0\njabba alias default openjdk@1.14.0\n</code></pre> <p>Information</p> <p>Run <code>java</code> to see if was installed correctly. </p>"},{"location":"games/minecraft/bedrock/nukkit/#getting-the-server-jar","title":"Getting the server jar","text":"<p>Please download the server jar from below.</p> <pre><code>wget https://ci.opencollab.dev/job/NukkitX/job/Nukkit/job/master/lastSuccessfulBuild/artifact/target/nukkit-1.0-SNAPSHOT.jar -O Nukkit-server.jar\n</code></pre> <p>Information</p> <p>Don't see the version you are looking for? you can grab the server jar from this website</p>"},{"location":"games/minecraft/bedrock/nukkit/#running-the-server","title":"Running the server","text":"<p>First, make sure you do have java installed by running <code>java</code> and make sure you have the server jar file by running <code>ls</code> and you should see <code>server.jar</code> or the file you downloaded, to run the server run the command below once.</p> <pre><code>java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui\n</code></pre> <p>Hint</p> <p>You will be asked to choose a language when you first run the server, you can also increase the ram used by upping the Xmx and Xms flags.</p> <p></p> <p></p>"},{"location":"games/minecraft/bedrock/nukkit/#connecting-to-the-server","title":"Connecting to the server","text":"<p>You should grab the IP of your server which can be found using the command below if you do not know it.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open Minecraft up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.  </p>"},{"location":"games/minecraft/bedrock/nukkit/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/minecraft/bedrock/nukkit/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/minecraft/bedrock/nukkit/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the Minecraft account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the Minecraft account <code>sudo su - minecraft</code>.</p>"},{"location":"games/minecraft/bedrock/nukkit/#usage","title":"Usage","text":"<p>You can then start your server by using the command below:</p> <pre><code>screen -S Nukkit -L java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave,  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r Nukkit</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/minecraft/bedrock/nukkit/#systemd","title":"Systemd","text":"<p>Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.</p>"},{"location":"games/minecraft/bedrock/nukkit/#installation_1","title":"Installation","text":"<pre><code>exit\n</code></pre> <p>Once you are root we will start by creating a service file called <code>minecraft@nukkit.service</code> in <code>/etc/systemd/system/</code>.</p> <pre><code>nano /etc/systemd/system/minecraft@nukkit.service\n</code></pre> <p>Next, a screen like this will show up, you will fill it up with the config provided below.  Use this config.</p> <pre><code>[Unit]\nDescription=Nukkit Minecraft server\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=minecraft\nWorkingDirectory=/opt/minecraft/nukkit/\nExecStart=/opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Hint</p> <p>To exit out of nano, use Ctrl + X and hit Y</p> <p>Run the commands below to test and start the server</p> <pre><code>systemctl daemon-reload \nsystemctl start minecraft@nukkit.service \nsystemctl status minecraft@nukkit.service\nsystemctl enable minecraft@nukkit.service\n</code></pre>"},{"location":"games/minecraft/bedrock/nukkit/#usage_1","title":"Usage","text":"<p>Here are some commands that will help you effectively manage the service. Start service:</p> <pre><code>systemctl start minecraft@nukkit.service \n</code></pre> <p>Restart service:</p> <pre><code>systemctl restart minecraft@nukkit.service \n</code></pre> <p>Status of service:</p> <pre><code>systemctl status minecraft@nukkit.service \n</code></pre> <p>Stop service:</p> <pre><code>systemctl stop minecraft@nukkit.service \n</code></pre> <p>View logs:</p> <pre><code>journalctl -n 50 -f -u minecraft@nukkit.service\n</code></pre>"},{"location":"games/minecraft/bedrock/nukkit/#resources","title":"Resources","text":"<ul> <li>Nukkit Github</li> <li>Nukkit Wiki <li>Discord</li> <li>Forums</li> <li>Plugin repository</li>"},{"location":"games/minecraft/bedrock/pocketmine/","title":"Hosting a PocketMine-MP Server","text":""},{"location":"games/minecraft/bedrock/pocketmine/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a PocketMine-MP Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen unzip curl -y \n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/minecraft/bedrock/pocketmine/#creating-a-user-for-minecraft","title":"Creating a user for Minecraft","text":"<p>For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server:</p> <pre><code>sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the Minecraft user.</p> <pre><code>sudo su - minecraft\n</code></pre>"},{"location":"games/minecraft/bedrock/pocketmine/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir pmmp\ncd pmmp\n</code></pre>"},{"location":"games/minecraft/bedrock/pocketmine/#using-the-installer","title":"Using the installer","text":"<p>The PocketMine-MP team has kindly made a script that will automatically install the server for you.</p> <pre><code>curl -sL https://get.pmmp.io | bash -s -\n</code></pre> <p></p>"},{"location":"games/minecraft/bedrock/pocketmine/#starting-the-server","title":"Starting the server","text":"<p>Execute the command below in the same directory you ran the installer script in.</p> <pre><code>./start.sh\n</code></pre> <p>This will ask you to start configuring your server which you should fill in yourselves.  </p>"},{"location":"games/minecraft/bedrock/pocketmine/#connecting-to-the-server","title":"Connecting to the server","text":"<p>The server IP should be provided after you finish the setup however In the eventuality that you do not have the IP you can still use the commands listed below to find your IP.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open Minecraft up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.  </p>"},{"location":"games/minecraft/bedrock/pocketmine/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/minecraft/bedrock/pocketmine/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the Minecraft account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the Minecraft account <code>sudo su - minecraft</code>.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#usage","title":"Usage","text":"<p>You can then start your server by using the command below:</p> <pre><code>screen -S PMMP -L ./start.sh\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave.  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r PMMP</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#systemd","title":"Systemd","text":"<p>Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.</p>"},{"location":"games/minecraft/bedrock/pocketmine/#installation_1","title":"Installation","text":"<pre><code>exit\n</code></pre> <p>Once you are root we will start by creating a service file called <code>minecraft@pmmp.service</code> in <code>/etc/systemd/system/</code>.</p> <pre><code>nano /etc/systemd/system/minecraft@pmmp.service\n</code></pre> <p>Next, a screen like this will show up, you will fill it up with the config provided below.  Use this config.</p> <pre><code>[Unit]\nDescription=PocketMine-MP Minecraft server\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=Minecraft\nWorkingDirectory=/opt/minecraft/pmmp/\nExecStart=/bin/bash start.sh\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Hint</p> <p>To exit out of nano, use Ctrl + X and hit Y</p> <p>Run the commands below to test and start the server</p> <pre><code>systemctl daemon-reload \nsystemctl start minecraft@pmmp.service \nsystemctl status minecraft@pmmp.service\nsystemctl enable minecraft@pmmp.service\n</code></pre>"},{"location":"games/minecraft/bedrock/pocketmine/#usage_1","title":"Usage","text":"<p>Here are some commands that will help you effectively manage the service. Start service:</p> <pre><code>systemctl start minecraft@pmmp.service \n</code></pre> <p>Restart service:</p> <pre><code>systemctl restart minecraft@pmmp.service \n</code></pre> <p>Status of service:</p> <pre><code>systemctl status minecraft@pmmp.service \n</code></pre> <p>Stop service:</p> <pre><code>systemctl stop minecraft@pmmp.service \n</code></pre> <p>View logs:</p> <pre><code>journalctl -n 50 -f -u minecraft@pmmp.service\n</code></pre>"},{"location":"games/minecraft/bedrock/pocketmine/#resources","title":"Resources","text":"<ul> <li>PocketMine-MP Documentation</li> <li>PocketMine-MP Github</li> <li>Discord</li> <li>Forums</li> <li>StackOverFlow</li> <li>Docker Image</li> <li>Plugin repository</li> </ul>"},{"location":"games/minecraft/java/paper/","title":"Hosting a Paper Minecraft server","text":""},{"location":"games/minecraft/java/paper/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a Paper Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/minecraft/java/paper/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"games/minecraft/java/paper/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen unzip curl wget -y \n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/minecraft/java/paper/#creating-a-user-for-minecraft","title":"Creating a user for Minecraft","text":"<p>For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server:</p> <pre><code>sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the Minecraft user.</p> <pre><code>sudo su - minecraft\n</code></pre>"},{"location":"games/minecraft/java/paper/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir paper\ncd paper\n</code></pre>"},{"location":"games/minecraft/java/paper/#installing-java","title":"Installing Java","text":"<p>Run the commands below on the Minecraft user we created above.</p> <pre><code>curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash &amp;&amp; . ~/.jabba/jabba.sh\njabba install openjdk@1.14.0\njabba alias default openjdk@1.14.0\n</code></pre> <p>Information</p> <p>Run <code>java</code> to see if was installed correctly. </p> <p>Note</p> <p>1.17+ should run this instead!</p> <pre><code>jabba install openjdk@1.17.0\njabba alias default openjdk@1.17.0\n</code></pre>"},{"location":"games/minecraft/java/paper/#getting-the-server-jar","title":"Getting the server jar","text":"<p>Please download one of the server Jars from below. Currently, 1.20.1 is the latest server jar. 1.20.1</p> <pre><code>wget https://api.papermc.io/v2/projects/paper/versions/1.20.1/builds/145/downloads/paper-1.20.1-145.jar -O server.jar\n</code></pre> <p>1.20</p> <pre><code>wget https://api.papermc.io/v2/projects/paper/versions/1.20/builds/17/downloads/paper-1.20-17.jar -O server.jar\n</code></pre> <p>1.19.4</p> <pre><code>wget https://api.papermc.io/v2/projects/paper/versions/1.19.4/builds/550/downloads/paper-1.19.4-550.jar -O server.jar\n</code></pre> <p>Information</p> <p>Don't see the version you are looking for? you can grab the server jar from this website or here</p>"},{"location":"games/minecraft/java/paper/#running-the-server","title":"Running the server","text":"<p>First, make sure you do have java installed by running <code>java</code> and make sure you have the server jar file by running <code>ls</code> and you should see <code>server.jar</code> or the file you downloaded, to run the server run the command below once.</p> <pre><code>java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p>You will get a message asking you to accept the EULA. </p> <p>To accept the EULA just edit eula.txt and change false to true.</p> <pre><code>nano eula.txt\n</code></pre> <p>Before:  After: </p> <p>Note</p> <p>To exit from nano use Ctrl + X and Y to save the edited text.</p> <p>Next, you can run the same command again to start the server.</p> <pre><code>java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p>Hint</p> <p>server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags.</p> <p></p>"},{"location":"games/minecraft/java/paper/#connecting-to-the-server","title":"Connecting to the server","text":"<p>You should grab the IP of your server which can be found using the command below if you do not know it.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open Minecraft up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.  </p>"},{"location":"games/minecraft/java/paper/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/minecraft/java/paper/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/minecraft/java/paper/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the Minecraft account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the Minecraft account <code>sudo su - minecraft</code>.</p>"},{"location":"games/minecraft/java/paper/#usage","title":"Usage","text":"<p>You can then start your server by using the command below:</p> <pre><code>screen -S Paper -L java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave,  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r Paper</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/minecraft/java/paper/#systemd","title":"Systemd","text":"<p>Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.</p>"},{"location":"games/minecraft/java/paper/#installation_1","title":"Installation","text":"<pre><code>exit\n</code></pre> <p>Once you are root we will start by creating a service file called <code>minecraft@paper.service</code> in <code>/etc/systemd/system/</code>.</p> <pre><code>nano /etc/systemd/system/minecraft@paper.service\n</code></pre> <p>Next, a screen like this will show up, you will fill it up with the config provided below.  Use this config.</p> <pre><code>[Unit]\nDescription=Paper Minecraft server\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=minecraft\nWorkingDirectory=/opt/minecraft/paper/\nExecStart=/opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Hint</p> <p>To exit out of nano, use Ctrl + X and hit Y</p> <p>Run the commands below to test and start the server</p> <pre><code>systemctl daemon-reload \nsystemctl start minecraft@paper.service \nsystemctl status minecraft@paper.service\nsystemctl enable minecraft@paper.service\n</code></pre>"},{"location":"games/minecraft/java/paper/#usage_1","title":"Usage","text":"<p>Here are some commands that will help you effectively manage the service. Start service:</p> <pre><code>systemctl start minecraft@paper.service \n</code></pre> <p>Restart service:</p> <pre><code>systemctl restart minecraft@paper.service \n</code></pre> <p>Status of service:</p> <pre><code>systemctl status minecraft@paper.service \n</code></pre> <p>Stop service:</p> <pre><code>systemctl stop minecraft@paper.service \n</code></pre> <p>View logs:</p> <pre><code>journalctl -n 50 -f -u minecraft@paper.service\n</code></pre>"},{"location":"games/minecraft/java/paper/#resources","title":"Resources","text":"<ul> <li>PaperMC Documentation</li> <li>PaperMC Github</li> <li>Discord</li> <li>Plugin repository</li> </ul>"},{"location":"games/minecraft/java/vanilla/","title":"Hosting a vanilla Minecraft server","text":""},{"location":"games/minecraft/java/vanilla/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you do meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/minecraft/java/vanilla/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"games/minecraft/java/vanilla/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen unzip curl wget -y \n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/minecraft/java/vanilla/#creating-a-user-for-minecraft","title":"Creating a user for Minecraft","text":"<p>For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server:</p> <pre><code>sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the Minecraft user.</p> <pre><code>sudo su - minecraft\n</code></pre>"},{"location":"games/minecraft/java/vanilla/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir vanilla\ncd vanilla\n</code></pre>"},{"location":"games/minecraft/java/vanilla/#installing-java","title":"Installing Java","text":"<p>Run the commands below on the Minecraft user we created above.</p> <pre><code>curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash &amp;&amp; . ~/.jabba/jabba.sh\njabba install openjdk@1.14.0\njabba alias default openjdk@1.14.0\n</code></pre> <p>Note</p> <p>1.17+ hould run this instead!</p> <pre><code>jabba install openjdk@1.17.0\njabba alias default openjdk@1.17.0\n</code></pre>"},{"location":"games/minecraft/java/vanilla/#getting-the-server-jar","title":"Getting the server jar","text":"<p>Please download one of the server Jars from below. Currently, 1.20.1 is the latest server jar.</p> <pre><code>wget https://piston-data.mojang.com/v1/objects/84194a2f286ef7c14ed7ce0090dba59902951553/server.jar -O server.jar\n</code></pre> <p>1.20</p> <pre><code>wget https://piston-data.mojang.com/v1/objects/15c777e2cfe0556eef19aab534b186c0c6f277e1/server.jar -O server.jar\n</code></pre> <p>1.19.4</p> <pre><code>wget https://piston-data.mojang.com/v1/objects/8f3112a1049751cc472ec13e397eade5336ca7ae/server.jar -O server.jar\n</code></pre> <p>1.18.2</p> <pre><code>wget https://piston-data.mojang.com/v1/objects/c8f83c5655308435b3dcf03c06d9fe8740a77469/server.jar -O server.jar\n</code></pre> <p>Information</p> <p>Don't see the version you are looking for? you can grab the server jar from this website</p>"},{"location":"games/minecraft/java/vanilla/#running-the-server","title":"Running the server","text":"<p>First, make sure you do have java installed by running <code>java</code> and make sure you have the server jar file by running <code>ls</code> and you should see <code>server.jar</code> or the file you downloaded, to run the server run the command below once.</p> <pre><code>java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p>Hint</p> <p>server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags.</p> <p>You will get a message asking you to accept the EULA. </p> <p>To accept the EULA just edit eula.txt and change false to true.</p> <pre><code>nano eula.txt\n</code></pre> <p>Before:  After: </p> <p>Note</p> <p>To exit from nano use Ctrl + X and Y to save the edited text.</p> <p>Next you can run the same command again to start the server.</p> <pre><code>java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p> </p>"},{"location":"games/minecraft/java/vanilla/#connecting-to-the-server","title":"Connecting to the server","text":"<p>You should grab the IP of your server which can be found using the command below if you do not know it.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open Minecraft up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.  </p>"},{"location":"games/minecraft/java/vanilla/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/minecraft/java/vanilla/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/minecraft/java/vanilla/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the Minecraft account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the Minecraft account <code>sudo su - minecraft</code>.</p>"},{"location":"games/minecraft/java/vanilla/#usage","title":"Usage","text":"<p>You can then start your server by using the command below:</p> <pre><code>screen -S Minecraft -L java -Xmx1024M -Xms1024M -jar server.jar nogui\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave,  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r Minecraft</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/minecraft/java/vanilla/#systemd","title":"Systemd","text":"<p>Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.</p>"},{"location":"games/minecraft/java/vanilla/#installation_1","title":"Installation","text":"<pre><code>exit\n</code></pre> <p>Once you are root we will start by creating a service file called <code>minecraft@vanilla.service</code> in <code>/etc/systemd/system/</code>.</p> <pre><code>nano /etc/systemd/system/minecraft@vanilla.service\n</code></pre> <p>Next, a screen like this will show up, you will fill it up with the config provided below.  Use this config.</p> <pre><code>[Unit]\nDescription=Vanilla Minecraft server\nAfter=network.target\nWants=network-online.target\n\n[Service]\nType=simple\nUser=Minecraft\nWorkingDirectory=/opt/minecraft/vanilla/\nExecStart=/opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui\nRestart=always\nRestartSec=10\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p></p> <p>Hint</p> <p>To exit out of nano, use Ctrl + X and hit Y</p> <p>Run the commands below to test and start the server</p> <pre><code>systemctl daemon-reload \nsystemctl start minecraft@vanilla.service \nsystemctl status minecraft@vanilla.service\nsystemctl enable minecraft@vanilla.service\n</code></pre>"},{"location":"games/minecraft/java/vanilla/#usage_1","title":"Usage","text":"<p>Here are some commands that will help you effectively manage the service. Start service:</p> <pre><code>systemctl start minecraft@vanilla.service \n</code></pre> <p>Restart service:</p> <pre><code>systemctl restart minecraft@vanilla.service \n</code></pre> <p>Status of service:</p> <pre><code>systemctl status minecraft@vanilla.service \n</code></pre> <p>Stop service:</p> <pre><code>systemctl stop minecraft@vanilla.service \n</code></pre> <p>View logs:</p> <pre><code>journalctl -n 50 -f -u minecraft@vanilla.service\n</code></pre>"},{"location":"games/minecraft/java/vanilla/#resources","title":"Resources","text":"<ul> <li>Wiki <li>Discord</li> <li>Forums</li>"},{"location":"games/terraria/pc/","title":"Hosting a terraria server for PC","text":""},{"location":"games/terraria/pc/#introduction","title":"Introduction","text":"<p>In this guide, you will be able to host a PC terraria server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.</p>"},{"location":"games/terraria/pc/#requirements","title":"Requirements","text":"<ul> <li>You have a Linux VPS (Debian/Ubuntu).</li> <li>You are logged in as root or have a user that can use sudo.</li> <li>You know how to establish an SSH connection or use an SSH client. </li> </ul> <p>Don't know how to connect to your server? Check out this guide</p>"},{"location":"games/terraria/pc/#installing-required-packages","title":"Installing required packages","text":"<p>I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo curl wget file unzip zip -y\n</code></pre> <p>Warning</p> <p>You may get a popup like the one below, use the arrow key to click yes to proceed.</p> <p></p>"},{"location":"games/terraria/pc/#creating-a-user-for-terraria","title":"Creating a user for terraria","text":"<p>For security purposes, terraria should not be running under the root user. We will create a new system user and group with home directory /opt/terraria that will run the terraria server:</p> <pre><code>useradd -r -m -U -d /opt/terraria -s /bin/bash terraria\n</code></pre> <p>We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the terraria user, you\u2019ll need to be logged in to the server as root or user with sudo privileges.</p> <p>Before starting with the installation process, make sure you switch to the terraria user.</p> <pre><code>sudo su - terraria\n</code></pre>"},{"location":"games/terraria/pc/#creating-the-directory","title":"Creating the Directory","text":"<p>If you plan to both versions of the server running I would recommend creating a folder for them to make sure the files do not conflict.</p> <pre><code>mkdir PC\ncd PC\n</code></pre>"},{"location":"games/terraria/pc/#getting-the-server-files","title":"Getting the server files","text":"<p>Please download one of the server files from below.</p> <p>Latest</p> <pre><code>wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1449.zip -O server.zip\n</code></pre> <p>Information</p> <p>Don't see the version you are looking for? you can grab the server files from this website</p>"},{"location":"games/terraria/pc/#using-the-files","title":"Using the files","text":"<p>Please run the commands below:</p> <pre><code>unzip -q server.zip\ncp -R 1*/Linux/* ./ \nchmod +x TerrariaServer.bin.x86_64 \nrm -rf server.zip \nrm -rf version_number_downloaded_goes_here\nchown -R terraria:terraria /opt/terraria\n</code></pre>"},{"location":"games/terraria/pc/#running-the-server","title":"Running the server","text":"<p>Run the command below to get started.</p> <pre><code>./TerrariaServer.bin.x86_64 \n</code></pre>"},{"location":"games/terraria/pc/#connecting-to-the-server","title":"Connecting to the server","text":"<p>You should grab the IP of your server which can be found using the command below if you do not know it.</p> <pre><code>dig +short myip.opendns.com @resolver1.opendns.com\n</code></pre> <p>Note</p> <p>If the command above fails, try this command and copy the output as that is the IP of your server.</p> <p><code>curl icanhazip.com</code></p> <p>Copy the IP and open terraria up, go to servers and click add a server and under <code>Server Address</code> put the server's IP in and click Done.</p> <p> </p>"},{"location":"games/terraria/pc/#keeping-your-server-alive","title":"Keeping your server alive","text":""},{"location":"games/terraria/pc/#screen","title":"Screen","text":"<p>Screen is one way of keeping your server running in the background without having to keep your SSH session open.</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your server with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"games/terraria/pc/#installation","title":"Installation","text":"<p>You should've installed screen from the start of the guide. In the eventuality that you do not have <code>screen package</code> installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre> <p>Warning</p> <p>Make sure you are using root if you are still on the terraria account use <code>exit</code>, then execute the commands after you are done you should use the command listed to switch back to the terraria account <code>sudo su - terraria</code>.</p>"},{"location":"games/terraria/pc/#usage","title":"Usage","text":"<p>You can then start your server by using the command below:</p> <pre><code>screen -S terraria -L \n./TerrariaServer.bin.x86_64 </code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave,  You can leave the screen via <code>CTRL+AD</code> from this session so your Server is still online when you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r terraria</code> and either issue commands or shutdown the server via <code>CTRL+C</code>.</p>"},{"location":"games/terraria/pc/#resources","title":"Resources","text":"<ul> <li>Terraria Wiki</li> <li>Servers Page</li> <li>Discord</li> </ul>"},{"location":"hosting/","title":"Index","text":"<p>Welcome to the Hosting section of the GalaxyGate Wiki.</p> <p>Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server.  If you are not familiar with linux, you can check out the basics here.</p> <p>On the left, you can find a list of all available generic hosting guides.</p>"},{"location":"hosting/discord/javascript/","title":"Hosting a Discord.js Bot","text":""},{"location":"hosting/discord/javascript/#introduction","title":"Introduction","text":"<p>In this article you will learn:</p> <ul> <li>What is needed to host a Discord.js Bot.</li> <li>How to keep the bot running after closing the SSH session.</li> </ul> <p>In this article, we assume that:</p> <ul> <li>You are using discord.js as your library</li> <li>You have confirmed that your bot is working locally.</li> <li>You know how to establish an SSH connection.</li> <li>You know how to use FTP/SFTP to upload files.</li> <li>You have a Linux VPS (Debian/Ubuntu).</li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"hosting/discord/javascript/#upgrading-packages","title":"Upgrading packages","text":"<p>To ensure we have a smoother experience we should install some packages which includes some commands we may or may not use in the guide please either make sure you are executing these as root/a user with sudo.</p> <pre><code>apt update &amp;&amp; apt upgrade -y \napt install sudo screen curl unzip -y \napt install curl dirmngr apt-transport-https lsb-release libgnutls30 ca-certificates -y\n</code></pre> <p>Warning</p> <p>You should run this first, we use curl later on.</p>"},{"location":"hosting/discord/javascript/#installation","title":"Installation","text":""},{"location":"hosting/discord/javascript/#nodejs","title":"Node.js","text":"<p>For a JavaScript discord bot, you will need to have Node.js and npm installed on the server. To install Node.js &amp; npm run the commands listed. You can choose which version to install if you have a preference however I recommend that you should  choose v16.</p> <p>V17</p> <pre><code>curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash -\nsudo apt -y install nodejs\n</code></pre> <p>V16</p> <pre><code>curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash -\nsudo apt -y install nodejs\n</code></pre> <p>V12</p> <pre><code>curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\nsudo apt -y install nodejs\n</code></pre> <p>v10</p> <pre><code>curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -\nsudo apt -y install nodejs\n</code></pre> <p>Verify that node is installed correctly.</p> <pre><code>node -v\nnpm -v\n</code></pre> <p></p> <p>If you do not get a response from above or something went wrong, please take a screenshot of what went wrong and ask for help in our support server. </p>"},{"location":"hosting/discord/javascript/#getting-your-bot-onto-the-vps","title":"Getting your bot onto the VPS","text":"<p>First, you should zip your bot folder (don't zip your node_modules) in preparation for what you should do next after you finish zipping your bot files with an SFTP client of your choice, you should upload the zipped file which should contain all your files to the server, you should also remember the name of the zipped file.</p> <p>Note</p> <p>Don't have an SFTP client? you can download one Here.</p> <pre><code>unzip bot.zip\ncd botName\nnpm install \n</code></pre> <p></p>"},{"location":"hosting/discord/javascript/#running-the-bot","title":"Running the Bot","text":"<p>You can now start your bot using</p> <pre><code>node filename.js </code></pre> <p>Note</p> <p>The filename would be the main node file e.g <code>index.js</code>, <code>bot.js</code> or <code>Botname.js</code></p> <p></p> <p>To exit hit Ctrl + C</p> <p>Warning</p> <p>I: You should always test things before using the methods to ensure the bot can load up fine.</p> <p>II: Avoid committing your token to GitHub if you use that.</p> <p>III: Do not copy your node_modules folder use npm install, it saves you time and allows the dependencies to be built correctly.</p> <p>If everything went okay this far, you're left with one issue. While the bot is online on your server, it's only running inside of the current SSH session. Once you end that session, the bot's process gets terminated with it. To prevent this from happening, here are a few different methods:</p>"},{"location":"hosting/discord/javascript/#247","title":"24/7","text":"<p>If you have successfully run the bot from the command line from above without any errors or issues then you should be ready to set up 24/7 bot hosting to keep the bot online.</p> <p>This has some advantages over simply running it in an SSH session:</p> <ul> <li>The bot runs in the background 24/7 unless it crashes.</li> <li>The Bot loads itself on reboot so no need to manually run it again.</li> <li>Easier to manage via CLI.</li> <li>You do not need to actively manage the bot.</li> </ul> <p>There are multiple ways to run the bot 24/7, feel free to choose the best method for you, personally I recommend pm2.</p>"},{"location":"hosting/discord/javascript/#screen","title":"Screen","text":"<p>One way of achieving a 24/7 bot would be using screen to keep the bot running in the background</p> <p>Warning</p> <p><code>screen</code> does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session.</p> <p>To start your bot with screen, first, make sure you have <code>screen</code> package installed.</p>"},{"location":"hosting/discord/javascript/#installation_1","title":"Installation","text":"<p>You can install screen using the one-liner below:</p> <pre><code>sudo apt update &amp;&amp; sudo apt install screen -y\n</code></pre>"},{"location":"hosting/discord/javascript/#usage","title":"Usage","text":"<p>You can then start your bot by using the command below:</p> <pre><code>screen -S &lt;BotName&gt; -L node x\n</code></pre> <p>Hint</p> <p>Replace x with the correct filename for your bot, for example:</p> <pre><code>screen -S aero -L node index.js\n</code></pre> <p>This should create a session you can safely leave without fear of it shutting down when you leave,  You can leave the screen via <code>CTRL+AD</code> from this session so your bot remains working after you leave.</p> <p>You can re-attach to the running screen by running <code>screen -r BotName</code> and then terminate the bot by using <code>CTRL+C</code>.</p>"},{"location":"hosting/discord/javascript/#systemd","title":"systemd","text":"<p>You can also use systemd as the service manager for your bot. </p>"},{"location":"hosting/discord/javascript/#installation_2","title":"Installation","text":"<p>Systemd requires a service description file to be created.</p> <p>You can create it using your favorite editor and save it to <code>/lib/systemd/system/bot.service</code>:</p> <pre><code>[Unit]\nDescription=My Node JS Bot\nAfter=multi-user.target\n[Service]\nWorkingDirectory=/root/botFolder\nUser=root\nExecStart=/usr/bin/node index.js\nType=simple\nRestart=always\nRestartSec=15\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>You need to replace the proper path for the bot folder as well as the startup command.</p> <p>Assuming the bot files are on <code>/root/bot</code> the file will look like this for a discord.js bot:</p> <pre><code>[Unit]\nDescription=My wonderful bot\nAfter=multi-user.target\n[Service]\nWorkingDirectory=/root/bot\nUser=root\nExecStart=/usr/bin/node bot.js Type=simple\nRestart=always\nRestartSec=15\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>After you finish creating the file, you need to run <code>sudo systemctl daemon-reload</code> which will tell systemd to re-scan for services.</p>"},{"location":"hosting/discord/javascript/#usage_1","title":"Usage","text":"<p>Below are some command usages for systemd.</p> <pre><code>sudo systemctl daemon-reload # Re-scans for service changes.\nsudo systemctl enable bot # Enables auto-start for the service named 'bot'.\nsudo systemctl start bot # Starts the 'bot' service.\nsudo systemctl stops bot # Stops the 'bot' service.\nsudo systemctl restart bot # Restarts the 'bot' service.\n</code></pre>"},{"location":"hosting/discord/javascript/#pm2","title":"PM2","text":"<p>PM2 is a process manager for the JavaScript runtime Node.js which can be used to keep node application alive after a killed SSH session. PM2 can easily start/stop/restart your bot as well as provide logging. </p> <p>Warning</p> <p>PM2 will restart when the bot crashes which can result in a boot loop.</p>"},{"location":"hosting/discord/javascript/#installing-pm2","title":"Installing PM2","text":"<p>Run the following commands...</p> <pre><code>npm install pm2@latest -g\n</code></pre>"},{"location":"hosting/discord/javascript/#starting-the-bot","title":"Starting the bot","text":"<pre><code>pm2 start &lt;botfile.js&gt;\n</code></pre> <p>note: Be in the same directory or use absolute paths.</p>"},{"location":"hosting/discord/javascript/#commands","title":"Commands","text":"<p>To check the status</p> <pre><code>pm2 ls\n</code></pre> <p>To check logs </p> <pre><code>pm2 logs 0\n</code></pre> <p>To enable systemd pm2</p> <pre><code>pm2 startup\n</code></pre>"},{"location":"hosting/discord/javascript/#pm2-tips","title":"PM2 tips","text":"<ul> <li>Use <code>pm2 save</code> to save the processes.</li> <li>Use <code>pm2 resurrect</code> to revive them in the event of a reboot and the processes did not come back.</li> <li>PM2 has a web app which can be found here.</li> <li><code>pm2 ls</code> will show all the running node instances.</li> <li>PM2 commands can be found here</li> </ul>"},{"location":"hosting/discord/javascript/#resources","title":"Resources","text":"<ul> <li>discord.js Docs</li> <li>discord.js GitHub</li> <li>discord.js Guide</li> <li>discord.js Discord</li> <li>discord.js Frameworks</li> <li>PM2 Docs</li> </ul>"},{"location":"hosting/discord/python/","title":"Hosting a discord.py bot","text":""},{"location":"hosting/discord/python/#introduction","title":"Introduction","text":"<p>In this guide you will learn:</p> <ul> <li>What is needed to host a discord.py Bot.</li> <li>How to keep the bot running after closing the SSH session.</li> </ul> <p>In this guide, we assume that:</p> <ul> <li>You're logged in as root or using a sudo user.</li> <li>You are using discord.py as your library.</li> <li>You already have your bot's files uploaded to the server.</li> <li>You have confirmed your bot is working locally.</li> <li>Know how to establish an SSH connection.</li> <li>You have a Linux VPS (Debian/Ubuntu).</li> </ul> <p>Don't know how to connect to your server? Check out this guide.</p>"},{"location":"hosting/discord/python/#installation","title":"Installation","text":"<p>In this section, we aim to install python3.8 to the server, note that debian users should be running these commands as <code>root</code> while ubuntu users can either use <code>root</code> or run these commands with <code>sudo</code> as a <code>sudo user</code>.</p> <p>Note</p> <p>Since Debian 8 and lower don't have the required Python version that discord.py requires. You can always use a tool like <code>pyenv</code> to easily compile and install any Python version  that you want, however it won't be covered in this topic.</p> <p>For Ubuntu, you would do:</p> <pre><code>sudo apt update\nsudo apt-get install software-properties-common -y\nsudo add-apt-repository ppa:deadsnakes/ppa -y\nsudo apt install python3.8 python3.8-dev python3.8-venv python3-pip -y\n</code></pre> <p>For Debian, you would do:</p> <pre><code>echo \"deb http://http.us.debian.org/debian/ testing non-free contrib main\" &gt;&gt; /etc/apt/sources.list\napt update\napt install python3 -y\n</code></pre> <p>Congrats! You now have Python 3.8 installed with pip. Now we can install the required dependencies for the bot  to run.</p> <p>Change to the path of your bot.</p> <pre><code>cd discord_bot\n</code></pre> <p>Note</p> <p>You should replace discord_bot with the folder you uploaded to the server</p> <p>Recommended: Create a virtual enviroment and activate it.</p> <pre><code>python3.8 -m venv venv\nsource venv/bin/activate\n</code></pre> <p>Info</p> <p>A virtual environment, or most commonly referred to as a venv, is an isolated environment for projects so you don't have to worry about polluting the global namespace. See the official documentation for more information.</p> <p>You do not need to create a new one every time you start, modify or stop the bot.</p> <p>Install the <code>discord.py</code> package.</p> <pre><code>pip install -U discord.py\n</code></pre> <p>Note</p> <p>If you use discord.py's voice features, then i would suggest appending <code>[voice]</code> at the end of the command.</p> <p>Note</p> <p>To install from a <code>requirements.txt</code> file, simply run <code>pip install -Ur requirements.txt</code> instead.</p>"},{"location":"hosting/discord/python/#running-your-bot","title":"Running your bot","text":"<p>We installed our required dependencies and there's only one last thing to do, run the bot. </p> <p>To run your bot you would simply do</p> <pre><code>python bot.py\n</code></pre> <p>Note</p> <p>If you use a file like <code>launcher.py</code> to start your bot, replace <code>bot.py</code> with that instead.</p> <p>Warning</p> <p>Encountering a <code>ModuleNotFound: No module named 'discord'</code> when trying to run the command above? Chances are you didn't activate the virtual environment or install the dependency.</p> <p>Now you can close your SSH client, but chances are is that your bot will stop which can be frustrating. Luckily, you can solve this by using a process manager such as <code>systemd</code> or a terminal multiplexer like <code>screen</code> to keep the session alive when you close your SSH connection. Read further down to learn how to utilize these programs.</p>"},{"location":"hosting/discord/python/#systemd","title":"Systemd","text":"<p>The most common init system you'll ever find on a Linux distro.</p> <p>To create and start editing a service file called <code>my_bot</code>, you would do</p> <pre><code>nano /etc/systemd/system/my_bot.service\n</code></pre> <p>Note</p> <p>Replace <code>nano</code> with the editor you choose, otherwise leave it be.</p> <p>Note</p> <p>Replace my_bot with the name of your bot</p> <p>We will just use this boilerplate for our bot, make sure you change this to the appropriate values.</p> <pre><code>[Unit]\nDescription=My Python Discord Bot\nAfter=multi-user.target\n\n[Service]\nWorkingDirectory=/root/discord_bot\n# This is where your bot's code lies\nUser=root\n# Change user if you aren't using root\n\n# Activates your virtual environment and starts the bot\n# replace bot.py with whatever Python file that starts your bot\nExecStart=/bin/bash -c \"source venv/bin/activate &amp;&amp; python bot.py\" # This will restart your bot if your bot doesn't return a 0 exit code\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Note</p> <p>If you don't use virtual environments, then you can just reassign the <code>ExecStart</code> part to <code>ExecStart=/usr/bin/python3.8 bot.py</code></p> <p>To save these changes in <code>nano</code> you would simply type CTRL-X to save your change, <code>y</code> to confirm the change, and <code>Enter</code> to write that change to <code>/etc/systemd/system/my_bot.service</code></p> <p>Now you would enter this command to tell systemd to see your newly created or changed service files.</p> <pre><code>systemctl daemon-reload\n</code></pre> <p>To start your bot, you would execute</p> <pre><code>systemctl start my_bot\n</code></pre> <p>To stop your bot, you would execute</p> <pre><code>systemctl stop my_bot\n</code></pre> <p>To restart your bot, you would execute</p> <pre><code>systemctl restart my_bot\n</code></pre> <p>To start your bot on VPS start, you would simply do</p> <pre><code>systemctl enable my_bot\n</code></pre> <p>and to revoke that you would do</p> <pre><code>systemctl disable my_bot\n</code></pre>"},{"location":"hosting/discord/python/#screen","title":"Screen","text":"<p>Most beginners would prefer this option as it's pretty straightforward, but it doesn't offer you the features a process manager would offer such as starting, stopping, and restarting your bot as <code>systemd</code> would.</p> <p>To create a session called <code>my_bot</code>, you would do</p> <pre><code>screen -S my_bot\n</code></pre> <p>Note</p> <p>Feel free to replace my_bot with something else.</p> <p>You may have noticed that it cleared your screen, which is completely normal. This session will stay here forever until you explicitly close it or if the server shuts down.</p> <p>In order to get your bot running, you must activate the virtual environment</p> <pre><code>source venv/bin/activate\n</code></pre> <p>Now, since you have your dependencies already installed and your virtual environment activated, you can start the bot with the following.</p> <pre><code>python bot.py\n</code></pre> <p>Note</p> <p>Replace <code>bot.py</code> with whatever file you use to start your bot</p> <p>Now you can simply disconnect from the session with <code>CTRL A</code> and <code>D</code> or just close the connection with your server. Congrats, your bot is running on a VPS without the need to keep your computer on.</p> <p>Now if you would like to re-attach to <code>my_bot</code>'s session you would simply enter</p> <pre><code>screen -r my_bot\n</code></pre> <p>Note</p> <p>If you used a different name don't forget to use that. <code>screen -ls</code> will also list all active screens.</p> <p>To detach from the bot's session without closing it you would simply hit <code>CTRL A</code> and <code>D</code> with your keyboard.</p> <p>To see how many screen sessions you have, simply enter</p> <pre><code>screen -ls\n</code></pre> <p>You should see a output similar to this</p> <pre><code>equity@server:~$ screen -ls\nThere is a screen on:\n        4146.my_bot     (03/30/2020 12:09:15 AM)        (Detached)\n1 Socket in /run/screen/S-equity.\nequity@server:~$\n</code></pre> <p>Note</p> <p>The <code>(Detached)</code> on the far right means we aren't in the virtual session, otherwise it would be <code>(Attached)</code></p>"},{"location":"hosting/discord/python/#nohup","title":"Nohup","text":"<p>On many Linux systems (if not all), including Ubuntu and Debian, you can use nohup to run your bot even after you have closed a session. To run nohup on your discord bot, you can do this, where bot.py is the name of your bot startup file.</p> <pre><code>nohup python3.8 bot.py &amp;\n</code></pre> <p>This will create a file in your current directory called 'nohup.out'. You can redirect it to a file such as 'logs.txt' by running this instead:</p> <pre><code>nohup python3.8 bot.py &amp;&gt; logs.txt &amp;\n</code></pre> <p>Tada! Your bot is online, and you can close the session without the bot dying.</p> <p>If you want to turn off the bot, things get a bit more complicated. You need to either get the PID of the bot's process, then kill it, or make a command in the bot for owners that calls <code>os._exit(1)</code>. In this section, we'll cover getting the PID of the bot's process. To get the PID of the bot, you can run this:</p> <pre><code>$ ps -ef\n</code></pre> <p>This will display a large list of running processes. You'll need to find the line that has \"python3 bot.py\" in the rightmost column, then find the PID of that line (it's in the second column). Once you have that PID, you can run <code>kill &lt;pid&gt;</code>, and the bot will gracefully free used memory, and shut off. Now, you can run the bot again :)</p>"},{"location":"hosting/discord/python/#resources","title":"Resources","text":"<ul> <li>discord.py Docs</li> <li>discord.py GitHub</li> <li>discord.py Discord</li> </ul>"}]}