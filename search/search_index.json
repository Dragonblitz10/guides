{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GalaxyGate Guides \u00b6 This Website is a place where users can submit guides for server administration, bot management and everything related. If you want to contribute, please head over to our GitHub .","title":"Home"},{"location":"#galaxygate-guides","text":"This Website is a place where users can submit guides for server administration, bot management and everything related. If you want to contribute, please head over to our GitHub .","title":"GalaxyGate Guides"},{"location":"basics/","text":"Welcome to the Basics section of the GalaxyGate Wiki. This section contains the basics of Linux VPS administration, from creating a user to fixing common issues. On the left, you can find a list of all available guides. We suggest you start with Login (Linux) .","title":"Index"},{"location":"basics/first_login/","text":"How to login (Linux) \u00b6 Introduction \u00b6 GalaxyGate servers can be managed by using an SSH client or SSH via terminal.To connect to your server, you'll need to open a terminal. How you do this varies between operating systems, but generally for the following operating systems: Linux : Search Terminal or press CTRL+ALT+T. macOS : Search Terminal. Windows Git bash : Git for windows comes with SSH. Windows SSH Client : You can download an SSH client like Bitvise . (see this section ) Using terminal \u00b6 Once the terminal is open, enter the following command. Make sure to substitute in your server's IP address after the @ ( 192.198.93.134 ) should be your server's address . ssh root@192.198.93.134 when you login the first time, the server isn't identified on your home machine, so you'll be asked if you're sure you want to continue connecting. You can type yes and then press ENTER key. After clicking enter a host key fingerprint is saved to your local machine and you'll receive this confirmation: Warning: Permanently added '192.198.93.134' ( ECDSA ) to the list of known hosts. Asuming you don't have SSH keys added you will see this hopefully: root@192.198.93.134 ' s password: When you enter your password, nothing is displayed in the terminal this is to prevent visual hacking, so it is suggested to paste in the initial password. Pasting into terminals is different on each platform: Linux: use CTRL+SHIFT+V. macOS: use SHIFT-CMD-V or the middle mouse button. Windows Bash: right-click on the window bar, choose Edit, then Paste. You can also right-click to paste if you enable QuickEdit mode. Windows CMD: If you are using CMD use Ctrl V. Once you've entered the password, press ENTER. Remote Host has changed \u00b6 You may happen to encounter this in your life: This usually happens when you reinstall the OS and use the same IP, this just means that your local machine notices that the host key has changed and someone may be snooping in as the local machine expects the old host key. If this happens, you can delete the old server's host key from your local system with the command ssh-keygen -R 192.198.93.134 and then reconnect. Using an SSH Client \u00b6 Bitvise is a good SSH Client to use due to fact it has a built-in terminal along with a built-in SFTP client which is useful for transfering files without the use of git/CLI. You can download it here . Inputting the details \u00b6 You will see an GUI like this when you first open Bitvise. You will want to fill in the fields with the credentials you were given in the welcome email. Enter your vps IP in the hostname field, this starts with 144. Put root as the Username . Click on the dropdown and select Password. Make sure Store encrypted password in profile is ticked. Type in the password, this was either emailed or set by you on purchase. Hit save profile. Hit Log in. When you hit Log in and the correct details are entered you may notice this for the first time, just hit Accept and Save. How to use \u00b6 Highlight text to copy. Right click to paste. Ctrl C and Ctrl X can be used to exit certain screens. Commands typed here are executed on the VPS. Bitvise's SFTP client is used to transfer files, a local and remote side is viewed, to transfer files just move them in somehwere remote/local area.","title":"Login"},{"location":"basics/first_login/#how-to-login-linux","text":"","title":"How to login (Linux)"},{"location":"basics/first_login/#introduction","text":"GalaxyGate servers can be managed by using an SSH client or SSH via terminal.To connect to your server, you'll need to open a terminal. How you do this varies between operating systems, but generally for the following operating systems: Linux : Search Terminal or press CTRL+ALT+T. macOS : Search Terminal. Windows Git bash : Git for windows comes with SSH. Windows SSH Client : You can download an SSH client like Bitvise . (see this section )","title":"Introduction"},{"location":"basics/first_login/#using-terminal","text":"Once the terminal is open, enter the following command. Make sure to substitute in your server's IP address after the @ ( 192.198.93.134 ) should be your server's address . ssh root@192.198.93.134 when you login the first time, the server isn't identified on your home machine, so you'll be asked if you're sure you want to continue connecting. You can type yes and then press ENTER key. After clicking enter a host key fingerprint is saved to your local machine and you'll receive this confirmation: Warning: Permanently added '192.198.93.134' ( ECDSA ) to the list of known hosts. Asuming you don't have SSH keys added you will see this hopefully: root@192.198.93.134 ' s password: When you enter your password, nothing is displayed in the terminal this is to prevent visual hacking, so it is suggested to paste in the initial password. Pasting into terminals is different on each platform: Linux: use CTRL+SHIFT+V. macOS: use SHIFT-CMD-V or the middle mouse button. Windows Bash: right-click on the window bar, choose Edit, then Paste. You can also right-click to paste if you enable QuickEdit mode. Windows CMD: If you are using CMD use Ctrl V. Once you've entered the password, press ENTER.","title":"Using terminal"},{"location":"basics/first_login/#remote-host-has-changed","text":"You may happen to encounter this in your life: This usually happens when you reinstall the OS and use the same IP, this just means that your local machine notices that the host key has changed and someone may be snooping in as the local machine expects the old host key. If this happens, you can delete the old server's host key from your local system with the command ssh-keygen -R 192.198.93.134 and then reconnect.","title":"Remote Host has changed"},{"location":"basics/first_login/#using-an-ssh-client","text":"Bitvise is a good SSH Client to use due to fact it has a built-in terminal along with a built-in SFTP client which is useful for transfering files without the use of git/CLI. You can download it here .","title":"Using an SSH Client"},{"location":"basics/first_login/#inputting-the-details","text":"You will see an GUI like this when you first open Bitvise. You will want to fill in the fields with the credentials you were given in the welcome email. Enter your vps IP in the hostname field, this starts with 144. Put root as the Username . Click on the dropdown and select Password. Make sure Store encrypted password in profile is ticked. Type in the password, this was either emailed or set by you on purchase. Hit save profile. Hit Log in. When you hit Log in and the correct details are entered you may notice this for the first time, just hit Accept and Save.","title":"Inputting the details"},{"location":"basics/first_login/#how-to-use","text":"Highlight text to copy. Right click to paste. Ctrl C and Ctrl X can be used to exit certain screens. Commands typed here are executed on the VPS. Bitvise's SFTP client is used to transfer files, a local and remote side is viewed, to transfer files just move them in somehwere remote/local area.","title":"How to use"},{"location":"basics/fix_hostname/","text":"Unable to resolve host \u00b6 Introduction \u00b6 You may notice when you run sudo or any commands that you may see a small message that comes and says \"Sudo: unable to resolve host\", this means that the hostname doesn't match what was defined in the hosts file, this is a simple fix that will be explained and listed below. How to fix \u00b6 First, you should check the hostname file and see if that matches the hostname you have set. sudo cat /etc/hostname You can also see the hostname as it comes after your username e.g root@Helios. Keep the output of the previous command as you will be using that in the next step! Next, we will be checking the hosts file to make sure that the vps knows what the new hostname is. sudo nano /etc/hosts The default file would be this or a similar looking one: You want to edit it to resemble this: Note In my case it was Ubuntu -> Helios To exit from nano use Ctrl + X and Y to save the edited text. Tip Don't fancy using nano? you can use the command below. sed -i 's/ubuntu/newhost/' /etc/hosts If host is not ubuntu replace ubuntu to whatever it was shown.","title":"Fix unable to resolve host"},{"location":"basics/fix_hostname/#unable-to-resolve-host","text":"","title":"Unable to resolve host"},{"location":"basics/fix_hostname/#introduction","text":"You may notice when you run sudo or any commands that you may see a small message that comes and says \"Sudo: unable to resolve host\", this means that the hostname doesn't match what was defined in the hosts file, this is a simple fix that will be explained and listed below.","title":"Introduction"},{"location":"basics/fix_hostname/#how-to-fix","text":"First, you should check the hostname file and see if that matches the hostname you have set. sudo cat /etc/hostname You can also see the hostname as it comes after your username e.g root@Helios. Keep the output of the previous command as you will be using that in the next step! Next, we will be checking the hosts file to make sure that the vps knows what the new hostname is. sudo nano /etc/hosts The default file would be this or a similar looking one: You want to edit it to resemble this: Note In my case it was Ubuntu -> Helios To exit from nano use Ctrl + X and Y to save the edited text. Tip Don't fancy using nano? you can use the command below. sed -i 's/ubuntu/newhost/' /etc/hosts If host is not ubuntu replace ubuntu to whatever it was shown.","title":"How to fix"},{"location":"basics/sudo_user/","text":"Creating a Sudo user account \u00b6 Introduction \u00b6 The sudo command allows you to run programs with the security privileges of another user (by default, as the superuser). It prompts you for your password and confirms your request to execute a command by checking if you are allowed to use sudo or not. Creating a new user \u00b6 Using the adduser command you should create a user account for the Linux vps you are on. adduser username Warning Be sure to replace username with the user that you want to create. You then want to set a password which you will need to type twice, keystrokes aren't logged for security purposes so do not be alarmed if you do not see anything happening on the screen. The set password prompts: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully After setting a password you will be asked to fill in some basic user information, this is completely optional so you can just click enter a couple of times! User information prompts: Changing the user information for username Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Warning Make sure to type in Y and click enter otherwise you will have to redo the user information prompt! Granting user sudo \u00b6 Now we have added a user that you can log in into via ssh, it is now time for us to allow the user to use sudo. We will be using the usermod command to add username to the sudo or wheel group. Debian Based (Debian, Ubuntu) \u00b6 usermod -aG sudo username RHEL Based (RHEL, CentOS) \u00b6 usermod -aG wheel username Now we will test that if the user we have added is allowed to use sudo or not. Use the su command to log in to the username you have selected. su - username As you want to check if you have sudo you should run the command below to effectively test if you have sudo or not. sudo ls /root Since only root can read that directory you would require to be either root or have sudo to access the directory. Response if you have sudo: user@server:~$ sudo ls /root [ sudo ] password for user: file1 file2 fil3 Response if you don't have sudo: user@server:~$ sudo ls /root [ sudo ] password for user: user is not in the sudoers file. This incident will be reported.","title":"Creating Sudo User"},{"location":"basics/sudo_user/#creating-a-sudo-user-account","text":"","title":"Creating a Sudo user account"},{"location":"basics/sudo_user/#introduction","text":"The sudo command allows you to run programs with the security privileges of another user (by default, as the superuser). It prompts you for your password and confirms your request to execute a command by checking if you are allowed to use sudo or not.","title":"Introduction"},{"location":"basics/sudo_user/#creating-a-new-user","text":"Using the adduser command you should create a user account for the Linux vps you are on. adduser username Warning Be sure to replace username with the user that you want to create. You then want to set a password which you will need to type twice, keystrokes aren't logged for security purposes so do not be alarmed if you do not see anything happening on the screen. The set password prompts: Enter new UNIX password: Retype new UNIX password: passwd: password updated successfully After setting a password you will be asked to fill in some basic user information, this is completely optional so you can just click enter a couple of times! User information prompts: Changing the user information for username Enter the new value, or press ENTER for the default Full Name [] : Room Number [] : Work Phone [] : Home Phone [] : Other [] : Is the information correct? [ Y/n ] Warning Make sure to type in Y and click enter otherwise you will have to redo the user information prompt!","title":"Creating a new user"},{"location":"basics/sudo_user/#granting-user-sudo","text":"Now we have added a user that you can log in into via ssh, it is now time for us to allow the user to use sudo. We will be using the usermod command to add username to the sudo or wheel group.","title":"Granting user sudo"},{"location":"basics/sudo_user/#debian-based-debian-ubuntu","text":"usermod -aG sudo username","title":"Debian Based (Debian, Ubuntu)"},{"location":"basics/sudo_user/#rhel-based-rhel-centos","text":"usermod -aG wheel username Now we will test that if the user we have added is allowed to use sudo or not. Use the su command to log in to the username you have selected. su - username As you want to check if you have sudo you should run the command below to effectively test if you have sudo or not. sudo ls /root Since only root can read that directory you would require to be either root or have sudo to access the directory. Response if you have sudo: user@server:~$ sudo ls /root [ sudo ] password for user: file1 file2 fil3 Response if you don't have sudo: user@server:~$ sudo ls /root [ sudo ] password for user: user is not in the sudoers file. This incident will be reported.","title":"RHEL Based (RHEL, CentOS)"},{"location":"extras/","text":"Welcome to the extras section of the GalaxyGate Wiki. Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server. If you are not familiar with linux , you can check out the basics here . On the left, you can find a list of all available guides.","title":"Index"},{"location":"extras/tools/using_nvm/","text":"Using Node Version Manager \u00b6 Introduction \u00b6 Node Version Manager (nvm) is a version manager for node.js allowing you to choose what node version to use and install. Installing nvm \u00b6 First of all, let's start by updating and upgrading everything. You can update and upgrade everything by running the following: apt-get update && apt-get upgrade && apt -y install wget After that, Run the following to install: wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash After that finishes running, run the following: export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm This will load nvm and let you use it. Using nvm \u00b6 In this example, we'll be installing Node v16. To install, just run the following: nvm install v16 Should look like this: If for some reason it doesn't start using it automatically after installed, run this: nvm use v16 If the version isn't available it'll provide an error saying to install it. That should conclude the install and how to use process. Usage of nvm can be found here . Resources \u00b6 Git Repo","title":"NVM"},{"location":"extras/tools/using_nvm/#using-node-version-manager","text":"","title":"Using Node Version Manager"},{"location":"extras/tools/using_nvm/#introduction","text":"Node Version Manager (nvm) is a version manager for node.js allowing you to choose what node version to use and install.","title":"Introduction"},{"location":"extras/tools/using_nvm/#installing-nvm","text":"First of all, let's start by updating and upgrading everything. You can update and upgrade everything by running the following: apt-get update && apt-get upgrade && apt -y install wget After that, Run the following to install: wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash After that finishes running, run the following: export NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\" [ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm This will load nvm and let you use it.","title":"Installing nvm"},{"location":"extras/tools/using_nvm/#using-nvm","text":"In this example, we'll be installing Node v16. To install, just run the following: nvm install v16 Should look like this: If for some reason it doesn't start using it automatically after installed, run this: nvm use v16 If the version isn't available it'll provide an error saying to install it. That should conclude the install and how to use process. Usage of nvm can be found here .","title":"Using nvm"},{"location":"extras/tools/using_nvm/#resources","text":"Git Repo","title":"Resources"},{"location":"extras/tools/using_tmate/","text":"Using tmate (Collaboration tool) \u00b6 Introduction \u00b6 tmate is a clone of tmux (terminal multiplexer) that provides a secure, instant and easy-to-use terminal sharing solution over an SSH connection allowing you to share terminal access without giving away SSH credentials or adding an SSH key. Installing tmate \u00b6 Let's start by updating and upgrading everything Run the following to update and upgrade everything: apt-get update && apt-get upgrade After that, run the following to install the latest version of tmate available: apt-get install -y tmate That should install the latest tmate version available on the mirror you're using. If it errors, try doing the following: apt-get install -y git git-core build-essential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev automake libssh-dev libmsgpack-dev git clone https://github.com/tmate-io/tmate.git cd tmate ./autogen.sh ./configure make make install Now that tmate is installed, let's get to how to run it. Using tmate \u00b6 This step is quite simple, all you have to do is run the following: tmate All you have to do after you run that is copy which session you want to share and send it to the user you're wanting to share it with. Resources \u00b6 Website Repo","title":"Tmate"},{"location":"extras/tools/using_tmate/#using-tmate-collaboration-tool","text":"","title":"Using tmate (Collaboration tool)"},{"location":"extras/tools/using_tmate/#introduction","text":"tmate is a clone of tmux (terminal multiplexer) that provides a secure, instant and easy-to-use terminal sharing solution over an SSH connection allowing you to share terminal access without giving away SSH credentials or adding an SSH key.","title":"Introduction"},{"location":"extras/tools/using_tmate/#installing-tmate","text":"Let's start by updating and upgrading everything Run the following to update and upgrade everything: apt-get update && apt-get upgrade After that, run the following to install the latest version of tmate available: apt-get install -y tmate That should install the latest tmate version available on the mirror you're using. If it errors, try doing the following: apt-get install -y git git-core build-essential pkg-config libtool libevent-dev libncurses-dev zlib1g-dev automake libssh-dev libmsgpack-dev git clone https://github.com/tmate-io/tmate.git cd tmate ./autogen.sh ./configure make make install Now that tmate is installed, let's get to how to run it.","title":"Installing tmate"},{"location":"extras/tools/using_tmate/#using-tmate","text":"This step is quite simple, all you have to do is run the following: tmate All you have to do after you run that is copy which session you want to share and send it to the user you're wanting to share it with.","title":"Using tmate"},{"location":"extras/tools/using_tmate/#resources","text":"Website Repo","title":"Resources"},{"location":"games/","text":"Welcome to the Game Hosting section of the GalaxyGate Wiki. Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server. If you are not familiar with linux , you can check out the basics here . On the left, you can find a list of all available game guides.","title":"Index"},{"location":"games/minecraft/bedrock/bedrock/","text":"Hosting a Bedrock Server \u00b6 Introduction \u00b6 In this guide, you will be able to host a Bedrock Dedicated Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide. Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for Minecraft \u00b6 For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later. sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft Creating the Directory \u00b6 If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir bedrock cd bedrock Getting the files \u00b6 Download the files required to host the server as well as unzipping them using the command provided below. wget https://minecraft.azureedge.net/bin-linux/bedrock-server-1.17.11.01.zip -O server.zip unzip server.zip rm server.zip Starting the server \u00b6 Use the command below to start the server, please make sure you are in the same directory as the files are located in. LD_LIBRARY_PATH=. ./bedrock_server Connecting to the server \u00b6 You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft . Usage \u00b6 Install the required files. echo \"LD_LIBRARY_PATH=. ./bedrock_server\" >> Server.sh | chmod +x Server.sh You can then start your server by using the command below: screen -S Bedrock -L ./Server.sh This should create a session you can safely leave without fear of it shutting down when you leave. You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Bedrock and either issue commands or shutdown the server via CTRL+C . Systemd \u00b6 Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below. Installation \u00b6 exit Once you are root we will start by creating a service file called minecraft@bedrock.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@bedrock.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Bedrock Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/bedrock/ ExecStart = /bin/bash Server.sh Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@bedrock.service systemctl status minecraft@bedrock.service systemctl enable minecraft@bedrock.service Usage \u00b6 Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@bedrock.service Restart service: systemctl restart minecraft@bedrock.service Status of service: systemctl status minecraft@bedrock.service Stop service: systemctl stop minecraft@bedrock.service View logs: journalctl -n 50 -f -u minecraft@bedrock.service Resources \u00b6 FAQ Download Page Issue Tracker Wiki Reddit Tutorial","title":"Bedrock"},{"location":"games/minecraft/bedrock/bedrock/#hosting-a-bedrock-server","text":"","title":"Hosting a Bedrock Server"},{"location":"games/minecraft/bedrock/bedrock/#introduction","text":"In this guide, you will be able to host a Bedrock Dedicated Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/minecraft/bedrock/bedrock/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide.","title":"Requirements"},{"location":"games/minecraft/bedrock/bedrock/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/minecraft/bedrock/bedrock/#creating-a-user-for-minecraft","text":"For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later. sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft","title":"Creating a user for Minecraft"},{"location":"games/minecraft/bedrock/bedrock/#creating-the-directory","text":"If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir bedrock cd bedrock","title":"Creating the Directory"},{"location":"games/minecraft/bedrock/bedrock/#getting-the-files","text":"Download the files required to host the server as well as unzipping them using the command provided below. wget https://minecraft.azureedge.net/bin-linux/bedrock-server-1.17.11.01.zip -O server.zip unzip server.zip rm server.zip","title":"Getting the files"},{"location":"games/minecraft/bedrock/bedrock/#starting-the-server","text":"Use the command below to start the server, please make sure you are in the same directory as the files are located in. LD_LIBRARY_PATH=. ./bedrock_server","title":"Starting the server"},{"location":"games/minecraft/bedrock/bedrock/#connecting-to-the-server","text":"You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/minecraft/bedrock/bedrock/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/minecraft/bedrock/bedrock/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/minecraft/bedrock/bedrock/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft .","title":"Installation"},{"location":"games/minecraft/bedrock/bedrock/#usage","text":"Install the required files. echo \"LD_LIBRARY_PATH=. ./bedrock_server\" >> Server.sh | chmod +x Server.sh You can then start your server by using the command below: screen -S Bedrock -L ./Server.sh This should create a session you can safely leave without fear of it shutting down when you leave. You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Bedrock and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/minecraft/bedrock/bedrock/#systemd","text":"Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.","title":"Systemd"},{"location":"games/minecraft/bedrock/bedrock/#installation_1","text":"exit Once you are root we will start by creating a service file called minecraft@bedrock.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@bedrock.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Bedrock Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/bedrock/ ExecStart = /bin/bash Server.sh Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@bedrock.service systemctl status minecraft@bedrock.service systemctl enable minecraft@bedrock.service","title":"Installation"},{"location":"games/minecraft/bedrock/bedrock/#usage_1","text":"Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@bedrock.service Restart service: systemctl restart minecraft@bedrock.service Status of service: systemctl status minecraft@bedrock.service Stop service: systemctl stop minecraft@bedrock.service View logs: journalctl -n 50 -f -u minecraft@bedrock.service","title":"Usage"},{"location":"games/minecraft/bedrock/bedrock/#resources","text":"FAQ Download Page Issue Tracker Wiki Reddit Tutorial","title":"Resources"},{"location":"games/minecraft/bedrock/nukkit/","text":"Hosting a Nukkit Server \u00b6 Introduction \u00b6 In this guide, you will be able to host a Nukkit Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide. Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for Minecraft \u00b6 For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later. sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft Creating the Directory \u00b6 If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir nukkit cd nukkit Installing Java \u00b6 Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Information Run java to see if was installed correctly. Getting the server jar \u00b6 Please download the server jar from below. wget https://ci.opencollab.dev/job/NukkitX/job/Nukkit/job/master/lastSuccessfulBuild/artifact/target/nukkit-1.0-SNAPSHOT.jar -O Nukkit-server.jar Information Don't see the version you are looking for? you can grab the server jar from this website Running the server \u00b6 First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui Hint You will be asked to choose a language when you first run the server, you can also increase the ram used by upping the Xmx and Xms flags. Connecting to the server \u00b6 You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft . Usage \u00b6 You can then start your server by using the command below: screen -S Nukkit -L java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Nukkit and either issue commands or shutdown the server via CTRL+C . Systemd \u00b6 Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below. Installation \u00b6 exit Once you are root we will start by creating a service file called minecraft@nukkit.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@nukkit.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Nukkit Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/nukkit/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@nukkit.service systemctl status minecraft@nukkit.service systemctl enable minecraft@nukkit.service Usage \u00b6 Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@nukkit.service Restart service: systemctl restart minecraft@nukkit.service Status of service: systemctl status minecraft@nukkit.service Stop service: systemctl stop minecraft@nukkit.service View logs: journalctl -n 50 -f -u minecraft@nukkit.service Resources \u00b6 Nukkit Github Nukkit Wiki Discord Forums Plugin repository","title":"Nukkit"},{"location":"games/minecraft/bedrock/nukkit/#hosting-a-nukkit-server","text":"","title":"Hosting a Nukkit Server"},{"location":"games/minecraft/bedrock/nukkit/#introduction","text":"In this guide, you will be able to host a Nukkit Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/minecraft/bedrock/nukkit/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide.","title":"Requirements"},{"location":"games/minecraft/bedrock/nukkit/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/minecraft/bedrock/nukkit/#creating-a-user-for-minecraft","text":"For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server and install unzip which is needed later. sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft","title":"Creating a user for Minecraft"},{"location":"games/minecraft/bedrock/nukkit/#creating-the-directory","text":"If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir nukkit cd nukkit","title":"Creating the Directory"},{"location":"games/minecraft/bedrock/nukkit/#installing-java","text":"Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Information Run java to see if was installed correctly.","title":"Installing Java"},{"location":"games/minecraft/bedrock/nukkit/#getting-the-server-jar","text":"Please download the server jar from below. wget https://ci.opencollab.dev/job/NukkitX/job/Nukkit/job/master/lastSuccessfulBuild/artifact/target/nukkit-1.0-SNAPSHOT.jar -O Nukkit-server.jar Information Don't see the version you are looking for? you can grab the server jar from this website","title":"Getting the server jar"},{"location":"games/minecraft/bedrock/nukkit/#running-the-server","text":"First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui Hint You will be asked to choose a language when you first run the server, you can also increase the ram used by upping the Xmx and Xms flags.","title":"Running the server"},{"location":"games/minecraft/bedrock/nukkit/#connecting-to-the-server","text":"You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/minecraft/bedrock/nukkit/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/minecraft/bedrock/nukkit/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/minecraft/bedrock/nukkit/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft .","title":"Installation"},{"location":"games/minecraft/bedrock/nukkit/#usage","text":"You can then start your server by using the command below: screen -S Nukkit -L java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Nukkit and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/minecraft/bedrock/nukkit/#systemd","text":"Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.","title":"Systemd"},{"location":"games/minecraft/bedrock/nukkit/#installation_1","text":"exit Once you are root we will start by creating a service file called minecraft@nukkit.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@nukkit.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Nukkit Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/nukkit/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar Nukkit-server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@nukkit.service systemctl status minecraft@nukkit.service systemctl enable minecraft@nukkit.service","title":"Installation"},{"location":"games/minecraft/bedrock/nukkit/#usage_1","text":"Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@nukkit.service Restart service: systemctl restart minecraft@nukkit.service Status of service: systemctl status minecraft@nukkit.service Stop service: systemctl stop minecraft@nukkit.service View logs: journalctl -n 50 -f -u minecraft@nukkit.service","title":"Usage"},{"location":"games/minecraft/bedrock/nukkit/#resources","text":"Nukkit Github Nukkit Wiki Discord Forums Plugin repository","title":"Resources"},{"location":"games/minecraft/bedrock/pocketmine/","text":"Hosting a PocketMine-MP Server \u00b6 Introduction \u00b6 In this guide, you will be able to host a PocketMine-MP Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide. Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for Minecraft \u00b6 For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft Creating the Directory \u00b6 If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir pmmp cd pmmp Using the installer \u00b6 The PocketMine-MP team has kindly made a script that will automatically install the server for you. curl -sL https://get.pmmp.io | bash -s - Starting the server \u00b6 Execute the command below in the same directory you ran the installer script in. ./start.sh This will ask you to start configuring your server which you should fill in yourselves. Connecting to the server \u00b6 The server IP should be provided after you finish the setup however In the eventuality that you do not have the IP you can still use the commands listed below to find your IP. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft . Usage \u00b6 You can then start your server by using the command below: screen -S PMMP -L ./start.sh This should create a session you can safely leave without fear of it shutting down when you leave. You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r PMMP and either issue commands or shutdown the server via CTRL+C . Systemd \u00b6 Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below. Installation \u00b6 exit Once you are root we will start by creating a service file called minecraft@pmmp.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@pmmp.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = PocketMine-MP Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = Minecraft WorkingDirectory = /opt/minecraft/pmmp/ ExecStart = /bin/bash start.sh Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@pmmp.service systemctl status minecraft@pmmp.service systemctl enable minecraft@pmmp.service Usage \u00b6 Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@pmmp.service Restart service: systemctl restart minecraft@pmmp.service Status of service: systemctl status minecraft@pmmp.service Stop service: systemctl stop minecraft@pmmp.service View logs: journalctl -n 50 -f -u minecraft@pmmp.service Resources \u00b6 PocketMine-MP Documentation PocketMine-MP Github Discord Forums StackOverFlow Docker Image Plugin repository","title":"Pocketmine"},{"location":"games/minecraft/bedrock/pocketmine/#hosting-a-pocketmine-mp-server","text":"","title":"Hosting a PocketMine-MP Server"},{"location":"games/minecraft/bedrock/pocketmine/#introduction","text":"In this guide, you will be able to host a PocketMine-MP Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/minecraft/bedrock/pocketmine/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide.","title":"Requirements"},{"location":"games/minecraft/bedrock/pocketmine/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/minecraft/bedrock/pocketmine/#creating-a-user-for-minecraft","text":"For security purposes, Minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the Minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft","title":"Creating a user for Minecraft"},{"location":"games/minecraft/bedrock/pocketmine/#creating-the-directory","text":"If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir pmmp cd pmmp","title":"Creating the Directory"},{"location":"games/minecraft/bedrock/pocketmine/#using-the-installer","text":"The PocketMine-MP team has kindly made a script that will automatically install the server for you. curl -sL https://get.pmmp.io | bash -s -","title":"Using the installer"},{"location":"games/minecraft/bedrock/pocketmine/#starting-the-server","text":"Execute the command below in the same directory you ran the installer script in. ./start.sh This will ask you to start configuring your server which you should fill in yourselves.","title":"Starting the server"},{"location":"games/minecraft/bedrock/pocketmine/#connecting-to-the-server","text":"The server IP should be provided after you finish the setup however In the eventuality that you do not have the IP you can still use the commands listed below to find your IP. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/minecraft/bedrock/pocketmine/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/minecraft/bedrock/pocketmine/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/minecraft/bedrock/pocketmine/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft .","title":"Installation"},{"location":"games/minecraft/bedrock/pocketmine/#usage","text":"You can then start your server by using the command below: screen -S PMMP -L ./start.sh This should create a session you can safely leave without fear of it shutting down when you leave. You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r PMMP and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/minecraft/bedrock/pocketmine/#systemd","text":"Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.","title":"Systemd"},{"location":"games/minecraft/bedrock/pocketmine/#installation_1","text":"exit Once you are root we will start by creating a service file called minecraft@pmmp.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@pmmp.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = PocketMine-MP Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = Minecraft WorkingDirectory = /opt/minecraft/pmmp/ ExecStart = /bin/bash start.sh Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@pmmp.service systemctl status minecraft@pmmp.service systemctl enable minecraft@pmmp.service","title":"Installation"},{"location":"games/minecraft/bedrock/pocketmine/#usage_1","text":"Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@pmmp.service Restart service: systemctl restart minecraft@pmmp.service Status of service: systemctl status minecraft@pmmp.service Stop service: systemctl stop minecraft@pmmp.service View logs: journalctl -n 50 -f -u minecraft@pmmp.service","title":"Usage"},{"location":"games/minecraft/bedrock/pocketmine/#resources","text":"PocketMine-MP Documentation PocketMine-MP Github Discord Forums StackOverFlow Docker Image Plugin repository","title":"Resources"},{"location":"games/minecraft/java/paper/","text":"Hosting a Paper Minecraft server \u00b6 Introduction \u00b6 In this guide, you will be able to host a Paper Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide. Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl wget -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for Minecraft \u00b6 For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft Creating the Directory \u00b6 If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir paper cd paper Installing Java \u00b6 Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Information Run java to see if was installed correctly. Note 1.17 - 1.17.x should run this instead! jabba install openjdk@1.16.0 jabba alias default openjdk@1.16.0 Getting the server jar \u00b6 Please download one of the server Jars from below. Currently, 1.18 is the latest server jar. 1.18 wget https://papermc.io/api/v2/projects/paper/versions/1.18/builds/65/downloads/paper-1.18-65.jar -O server.jar 1.17.1 wget https://papermc.io/api/v2/projects/paper/versions/1.17.1/builds/398/downloads/paper-1.17.1-398.jar -O server.jar 1.16.5 wget https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/457/downloads/paper-1.16.5-457.jar -O server.jar 1.15.2 wget https://papermc.io/api/v2/projects/paper/versions/1.15.2/builds/391/downloads/paper-1.15.2-391.jar -O server.jar 1.14.4 wget https://papermc.io/api/v2/projects/paper/versions/1.14.4/builds/243/downloads/paper-1.14.4-243.jar -O server.jar Information Don't see the version you are looking for? you can grab the server jar from this website Running the server \u00b6 First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar server.jar nogui You will get a message asking you to accept the EULA. To accept the EULA just edit eula.txt and change false to true. nano eula.txt Before: After: Note To exit from nano use Ctrl + X and Y to save the edited text. Next, you can run the same command again to start the server. java -Xmx1024M -Xms1024M -jar server.jar nogui Hint server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags. Connecting to the server \u00b6 You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft . Usage \u00b6 You can then start your server by using the command below: screen -S Paper -L java -Xmx1024M -Xms1024M -jar server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Paper and either issue commands or shutdown the server via CTRL+C . Systemd \u00b6 Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below. Installation \u00b6 exit Once you are root we will start by creating a service file called minecraft@paper.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@paper.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Paper Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/paper/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@paper.service systemctl status minecraft@paper.service systemctl enable minecraft@paper.service Usage \u00b6 Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@paper.service Restart service: systemctl restart minecraft@paper.service Status of service: systemctl status minecraft@paper.service Stop service: systemctl stop minecraft@paper.service View logs: journalctl -n 50 -f -u minecraft@paper.service Resources \u00b6 PaperMC Documentation PaperMC Github Discord Plugin repository","title":"Paper"},{"location":"games/minecraft/java/paper/#hosting-a-paper-minecraft-server","text":"","title":"Hosting a Paper Minecraft server"},{"location":"games/minecraft/java/paper/#introduction","text":"In this guide, you will be able to host a Paper Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/minecraft/java/paper/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide.","title":"Requirements"},{"location":"games/minecraft/java/paper/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl wget -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/minecraft/java/paper/#creating-a-user-for-minecraft","text":"For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the Minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft","title":"Creating a user for Minecraft"},{"location":"games/minecraft/java/paper/#creating-the-directory","text":"If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir paper cd paper","title":"Creating the Directory"},{"location":"games/minecraft/java/paper/#installing-java","text":"Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Information Run java to see if was installed correctly. Note 1.17 - 1.17.x should run this instead! jabba install openjdk@1.16.0 jabba alias default openjdk@1.16.0","title":"Installing Java"},{"location":"games/minecraft/java/paper/#getting-the-server-jar","text":"Please download one of the server Jars from below. Currently, 1.18 is the latest server jar. 1.18 wget https://papermc.io/api/v2/projects/paper/versions/1.18/builds/65/downloads/paper-1.18-65.jar -O server.jar 1.17.1 wget https://papermc.io/api/v2/projects/paper/versions/1.17.1/builds/398/downloads/paper-1.17.1-398.jar -O server.jar 1.16.5 wget https://papermc.io/api/v2/projects/paper/versions/1.16.5/builds/457/downloads/paper-1.16.5-457.jar -O server.jar 1.15.2 wget https://papermc.io/api/v2/projects/paper/versions/1.15.2/builds/391/downloads/paper-1.15.2-391.jar -O server.jar 1.14.4 wget https://papermc.io/api/v2/projects/paper/versions/1.14.4/builds/243/downloads/paper-1.14.4-243.jar -O server.jar Information Don't see the version you are looking for? you can grab the server jar from this website","title":"Getting the server jar"},{"location":"games/minecraft/java/paper/#running-the-server","text":"First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar server.jar nogui You will get a message asking you to accept the EULA. To accept the EULA just edit eula.txt and change false to true. nano eula.txt Before: After: Note To exit from nano use Ctrl + X and Y to save the edited text. Next, you can run the same command again to start the server. java -Xmx1024M -Xms1024M -jar server.jar nogui Hint server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags.","title":"Running the server"},{"location":"games/minecraft/java/paper/#connecting-to-the-server","text":"You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/minecraft/java/paper/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/minecraft/java/paper/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/minecraft/java/paper/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft .","title":"Installation"},{"location":"games/minecraft/java/paper/#usage","text":"You can then start your server by using the command below: screen -S Paper -L java -Xmx1024M -Xms1024M -jar server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Paper and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/minecraft/java/paper/#systemd","text":"Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.","title":"Systemd"},{"location":"games/minecraft/java/paper/#installation_1","text":"exit Once you are root we will start by creating a service file called minecraft@paper.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@paper.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Paper Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = minecraft WorkingDirectory = /opt/minecraft/paper/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@paper.service systemctl status minecraft@paper.service systemctl enable minecraft@paper.service","title":"Installation"},{"location":"games/minecraft/java/paper/#usage_1","text":"Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@paper.service Restart service: systemctl restart minecraft@paper.service Status of service: systemctl status minecraft@paper.service Stop service: systemctl stop minecraft@paper.service View logs: journalctl -n 50 -f -u minecraft@paper.service","title":"Usage"},{"location":"games/minecraft/java/paper/#resources","text":"PaperMC Documentation PaperMC Github Discord Plugin repository","title":"Resources"},{"location":"games/minecraft/java/vanilla/","text":"Hosting a vanilla Minecraft server \u00b6 Introduction \u00b6 In this guide, you will be able to host a Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you do meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide. Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl wget -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for Minecraft \u00b6 For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft Creating the Directory \u00b6 If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir vanilla cd vanilla Installing Java \u00b6 Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Note 1.17 - 1.17.x should run this instead! jabba install openjdk@1.16.0 jabba alias default openjdk@1.16.0 Getting the server jar \u00b6 Please download one of the server Jars from below. Currently, 1.17.1 is the latest server jar. 1.17.1 wget https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar -O server.jar 1.16.5 wget https://launcher.mojang.com/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar -O server.jar 1.16.1 wget https://launcher.mojang.com/v1/objects/a412fd69db1f81db3f511c1463fd304675244077/server.jar -O server.jar Information Don't see the version you are looking for? you can grab the server jar from this website Running the server \u00b6 First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar server.jar nogui Hint server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags. You will get a message asking you to accept the EULA. To accept the EULA just edit eula.txt and change false to true. nano eula.txt Before: After: Note To exit from nano use Ctrl + X and Y to save the edited text. Next you can run the same command again to start the server. java -Xmx1024M -Xms1024M -jar server.jar nogui Connecting to the server \u00b6 You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft . Usage \u00b6 You can then start your server by using the command below: screen -S Minecraft -L java -Xmx1024M -Xms1024M -jar server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Minecraft and either issue commands or shutdown the server via CTRL+C . Systemd \u00b6 Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below. Installation \u00b6 exit Once you are root we will start by creating a service file called minecraft@vanilla.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@vanilla.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Vanilla Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = Minecraft WorkingDirectory = /opt/minecraft/vanilla/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@vanilla.service systemctl status minecraft@vanilla.service systemctl enable minecraft@vanilla.service Usage \u00b6 Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@vanilla.service Restart service: systemctl restart minecraft@vanilla.service Status of service: systemctl status minecraft@vanilla.service Stop service: systemctl stop minecraft@vanilla.service View logs: journalctl -n 50 -f -u minecraft@vanilla.service Resources \u00b6 Wiki Discord Forums","title":"Vanilla"},{"location":"games/minecraft/java/vanilla/#hosting-a-vanilla-minecraft-server","text":"","title":"Hosting a vanilla Minecraft server"},{"location":"games/minecraft/java/vanilla/#introduction","text":"In this guide, you will be able to host a Minecraft server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you do meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/minecraft/java/vanilla/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide.","title":"Requirements"},{"location":"games/minecraft/java/vanilla/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo screen unzip curl wget -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/minecraft/java/vanilla/#creating-a-user-for-minecraft","text":"For security purposes, minecraft should not be running under the root user. We will create a new system user and group with home directory /opt/minecraft that will run the minecraft server: sudo useradd -r -m -U -d /opt/minecraft -s /bin/bash minecraft We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the minecraft user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the Minecraft user. sudo su - minecraft","title":"Creating a user for Minecraft"},{"location":"games/minecraft/java/vanilla/#creating-the-directory","text":"If you plan to have multiple versions of Minecraft running I would recommend creating a folder for them to make sure the files do not conflict. mkdir vanilla cd vanilla","title":"Creating the Directory"},{"location":"games/minecraft/java/vanilla/#installing-java","text":"Run the commands below on the Minecraft user we created above. curl -sL https://github.com/shyiko/jabba/raw/master/install.sh | bash && . ~/.jabba/jabba.sh jabba install openjdk@1.14.0 jabba alias default openjdk@1.14.0 Note 1.17 - 1.17.x should run this instead! jabba install openjdk@1.16.0 jabba alias default openjdk@1.16.0","title":"Installing Java"},{"location":"games/minecraft/java/vanilla/#getting-the-server-jar","text":"Please download one of the server Jars from below. Currently, 1.17.1 is the latest server jar. 1.17.1 wget https://launcher.mojang.com/v1/objects/a16d67e5807f57fc4e550299cf20226194497dc2/server.jar -O server.jar 1.16.5 wget https://launcher.mojang.com/v1/objects/1b557e7b033b583cd9f66746b7a9ab1ec1673ced/server.jar -O server.jar 1.16.1 wget https://launcher.mojang.com/v1/objects/a412fd69db1f81db3f511c1463fd304675244077/server.jar -O server.jar Information Don't see the version you are looking for? you can grab the server jar from this website","title":"Getting the server jar"},{"location":"games/minecraft/java/vanilla/#running-the-server","text":"First, make sure you do have java installed by running java and make sure you have the server jar file by running ls and you should see server.jar or the file you downloaded, to run the server run the command below once. java -Xmx1024M -Xms1024M -jar server.jar nogui Hint server.jar might include numbering depending where you have downloaded your jar from, you can also increase the ram used by upping the Xmx and Xms flags. You will get a message asking you to accept the EULA. To accept the EULA just edit eula.txt and change false to true. nano eula.txt Before: After: Note To exit from nano use Ctrl + X and Y to save the edited text. Next you can run the same command again to start the server. java -Xmx1024M -Xms1024M -jar server.jar nogui","title":"Running the server"},{"location":"games/minecraft/java/vanilla/#connecting-to-the-server","text":"You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open Minecraft up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/minecraft/java/vanilla/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/minecraft/java/vanilla/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/minecraft/java/vanilla/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the Minecraft account use exit , then execute the commands after you are done you should use the command listed to switch back to the Minecraft account sudo su - minecraft .","title":"Installation"},{"location":"games/minecraft/java/vanilla/#usage","text":"You can then start your server by using the command below: screen -S Minecraft -L java -Xmx1024M -Xms1024M -jar server.jar nogui This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r Minecraft and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/minecraft/java/vanilla/#systemd","text":"Systemd can be an easy way of keeping your Minecraft server up, setting a service file for Minecraft should be easy and quick if you follow closely, first you should switch to root for this by running the command below.","title":"Systemd"},{"location":"games/minecraft/java/vanilla/#installation_1","text":"exit Once you are root we will start by creating a service file called minecraft@vanilla.service in /etc/systemd/system/ . nano /etc/systemd/system/minecraft@vanilla.service Next, a screen like this will show up, you will fill it up with the config provided below. Use this config. [Unit] Description = Vanilla Minecraft server After = network.target Wants = network-online.target [Service] Type = simple User = Minecraft WorkingDirectory = /opt/minecraft/vanilla/ ExecStart = /opt/minecraft/.jabba/jdk/openjdk@1.14.0/bin/java -Xmx1024M -Xms1024M -jar server.jar nogui Restart = always RestartSec = 10 [Install] WantedBy = multi-user.target Hint To exit out of nano, use Ctrl + X and hit Y Run the commands below to test and start the server systemctl daemon-reload systemctl start minecraft@vanilla.service systemctl status minecraft@vanilla.service systemctl enable minecraft@vanilla.service","title":"Installation"},{"location":"games/minecraft/java/vanilla/#usage_1","text":"Here are some commands that will help you effectively manage the service. Start service: systemctl start minecraft@vanilla.service Restart service: systemctl restart minecraft@vanilla.service Status of service: systemctl status minecraft@vanilla.service Stop service: systemctl stop minecraft@vanilla.service View logs: journalctl -n 50 -f -u minecraft@vanilla.service","title":"Usage"},{"location":"games/minecraft/java/vanilla/#resources","text":"Wiki Discord Forums","title":"Resources"},{"location":"games/terraria/pc/","text":"Hosting a terraria server for PC \u00b6 Introduction \u00b6 In this guide, you will be able to host a PC terraria server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server. Requirements \u00b6 You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide Installing required packages \u00b6 I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo curl wget file unzip zip -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed. Creating a user for terraria \u00b6 For security purposes, terraria should not be running under the root user. We will create a new system user and group with home directory /opt/terraria that will run the terraria server: useradd -r -m -U -d /opt/terraria -s /bin/bash terraria We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the terraria user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the terraria user. sudo su - terraria Creating the Directory \u00b6 If you plan to both versions of the server running I would recommend creating a folder for them to make sure the files do not conflict. mkdir PC cd PC Getting the server files \u00b6 Please download one of the server files from below. Latest wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1432.zip -O server.zip 1.4.0.5 wget https://www.terraria.org/system/dedicated_servers/archives/000/000/039/original/terraria-server-1405.zip -O server.zip 1.4.0.4 wget https://www.terraria.org/system/dedicated_servers/archives/000/000/038/original/terraria-server-1404.zip -O server.zip 1.4.0.3 wget https://terraria.org/system/dedicated_servers/archives/000/000/037/original/terraria-server-1403.zip -O server.zip 1.4.0.2 wget https://terraria.org/system/dedicated_servers/archives/000/000/036/original/terraria-server-1402.zip -O server.zip 1.3.5.3 wget http://terraria.org/server/terraria-server-1353.zip -O server.zip Information Don't see the version you are looking for? you can grab the server files from this website Using the files \u00b6 Please run the commands below: unzip -q server.zip cp -R 1*/Linux/* ./ chmod +x TerrariaServer.bin.x86_64 rm -rf server.zip rm -rf version_number_downloaded_goes_here chown -R terraria:terraria /opt/terraria Running the server \u00b6 Run the command below to get started. ./TerrariaServer.bin.x86_64 Connecting to the server \u00b6 You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open terraria up, go to servers and click add a server and under Server Address put the server's IP in and click Done. Keeping your server alive \u00b6 Screen \u00b6 Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed. Installation \u00b6 You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the terraria account use exit , then execute the commands after you are done you should use the command listed to switch back to the terraria account sudo su - terraria . Usage \u00b6 You can then start your server by using the command below: screen -S terraria -L ./TerrariaServer.bin.x86_64 This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r terraria and either issue commands or shutdown the server via CTRL+C . Resources \u00b6 Terraria Wiki Servers Page Discord","title":"PC"},{"location":"games/terraria/pc/#hosting-a-terraria-server-for-pc","text":"","title":"Hosting a terraria server for PC"},{"location":"games/terraria/pc/#introduction","text":"In this guide, you will be able to host a PC terraria server as well as keeping it alive without having to be logged in all the time. Before you start, make sure you meet the requirements and have a basic understanding of Linux, if you have issues or are stuck on a step you can ask for help in our support server.","title":"Introduction"},{"location":"games/terraria/pc/#requirements","text":"You have a Linux VPS (Debian/Ubuntu). You are logged in as root or have a user that can use sudo. You know how to establish an SSH connection or use an SSH client. Don't know how to connect to your server? Check out this guide","title":"Requirements"},{"location":"games/terraria/pc/#installing-required-packages","text":"I recommend that you should be logged in as root before executing these commands to ensure everything goes smoothly. apt update && apt upgrade -y apt install sudo curl wget file unzip zip -y Warning You may get a popup like the one below, use the arrow key to click yes to proceed.","title":"Installing required packages"},{"location":"games/terraria/pc/#creating-a-user-for-terraria","text":"For security purposes, terraria should not be running under the root user. We will create a new system user and group with home directory /opt/terraria that will run the terraria server: useradd -r -m -U -d /opt/terraria -s /bin/bash terraria We are not going to set a password for this user. This is a good security practice because this user will not be able to log in via SSH. To login to the terraria user, you\u2019ll need to be logged in to the server as root or user with sudo privileges. Before starting with the installation process, make sure you switch to the terraria user. sudo su - terraria","title":"Creating a user for terraria"},{"location":"games/terraria/pc/#creating-the-directory","text":"If you plan to both versions of the server running I would recommend creating a folder for them to make sure the files do not conflict. mkdir PC cd PC","title":"Creating the Directory"},{"location":"games/terraria/pc/#getting-the-server-files","text":"Please download one of the server files from below. Latest wget https://terraria.org/api/download/pc-dedicated-server/terraria-server-1432.zip -O server.zip 1.4.0.5 wget https://www.terraria.org/system/dedicated_servers/archives/000/000/039/original/terraria-server-1405.zip -O server.zip 1.4.0.4 wget https://www.terraria.org/system/dedicated_servers/archives/000/000/038/original/terraria-server-1404.zip -O server.zip 1.4.0.3 wget https://terraria.org/system/dedicated_servers/archives/000/000/037/original/terraria-server-1403.zip -O server.zip 1.4.0.2 wget https://terraria.org/system/dedicated_servers/archives/000/000/036/original/terraria-server-1402.zip -O server.zip 1.3.5.3 wget http://terraria.org/server/terraria-server-1353.zip -O server.zip Information Don't see the version you are looking for? you can grab the server files from this website","title":"Getting the server files"},{"location":"games/terraria/pc/#using-the-files","text":"Please run the commands below: unzip -q server.zip cp -R 1*/Linux/* ./ chmod +x TerrariaServer.bin.x86_64 rm -rf server.zip rm -rf version_number_downloaded_goes_here chown -R terraria:terraria /opt/terraria","title":"Using the files"},{"location":"games/terraria/pc/#running-the-server","text":"Run the command below to get started. ./TerrariaServer.bin.x86_64","title":"Running the server"},{"location":"games/terraria/pc/#connecting-to-the-server","text":"You should grab the IP of your server which can be found using the command below if you do not know it. dig +short myip.opendns.com @resolver1.opendns.com Note If the command above fails, try this command and copy the output as that is the IP of your server. curl icanhazip.com Copy the IP and open terraria up, go to servers and click add a server and under Server Address put the server's IP in and click Done.","title":"Connecting to the server"},{"location":"games/terraria/pc/#keeping-your-server-alive","text":"","title":"Keeping your server alive"},{"location":"games/terraria/pc/#screen","text":"Screen is one way of keeping your server running in the background without having to keep your SSH session open. Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your server with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"games/terraria/pc/#installation","text":"You should've installed screen from the start of the guide. In the eventuality that you do not have screen package installed, please use the command below and make sure you're using root or sudo. You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Warning Make sure you are using root if you are still on the terraria account use exit , then execute the commands after you are done you should use the command listed to switch back to the terraria account sudo su - terraria .","title":"Installation"},{"location":"games/terraria/pc/#usage","text":"You can then start your server by using the command below: screen -S terraria -L ./TerrariaServer.bin.x86_64 This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your Server is still online when you leave. You can re-attach to the running screen by running screen -r terraria and either issue commands or shutdown the server via CTRL+C .","title":"Usage"},{"location":"games/terraria/pc/#resources","text":"Terraria Wiki Servers Page Discord","title":"Resources"},{"location":"hosting/","text":"Welcome to the Hosting section of the GalaxyGate Wiki. Most of these guides assume that you have very basic knowledge of Linux and that you can connect to your server. If you are not familiar with linux , you can check out the basics here . On the left, you can find a list of all available generic hosting guides.","title":"Index"},{"location":"hosting/discord/javascript/","text":"Hosting a Discord.js Bot \u00b6 Introduction \u00b6 In this article you will learn: What is needed to host a Discord.js Bot. How to keep the bot running after closing the SSH session. In this article, we assume that: You are using discord.js as your library You have confirmed that your bot is working locally. You know how to establish an SSH connection. You know how to use FTP/SFTP to upload files. You have a Linux VPS (Debian/Ubuntu). Don't know how to connect to your server? Check out this guide. Upgrading packages \u00b6 To ensure we have a smoother experience we should install some packages which includes some commands we may or may not use in the guide please either make sure you are executing these as root/a user with sudo. apt update && apt upgrade -y apt install sudo screen curl unzip -y apt install curl dirmngr apt-transport-https lsb-release libgnutls30 ca-certificates -y Warning You should run this first, we use curl later on. Installation \u00b6 Node.js \u00b6 For a JavaScript discord bot, you will need to have Node.js and npm installed on the server. To install Node.js & npm run the commands listed. You can choose which version to install if you have a preference however I recommend that you should choose v16. V17 curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash - sudo apt -y install nodejs V16 curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt -y install nodejs V12 curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt -y install nodejs v10 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt -y install nodejs Verify that node is installed correctly. node -v npm -v If you do not get a response from above or something went wrong, please take a screenshot of what went wrong and ask for help in our support server. Getting your bot onto the VPS \u00b6 First, you should zip your bot folder ( don't zip your node_modules ) in preparation for what you should do next after you finish zipping your bot files with an SFTP client of your choice, you should upload the zipped file which should contain all your files to the server, you should also remember the name of the zipped file. Note Don't have an SFTP client? you can download one Here. unzip bot.zip cd botName npm install Running the Bot \u00b6 You can now start your bot using node filename.js Note The filename would be the main node file e.g index.js , bot.js or Botname.js To exit hit Ctrl + C Warning I: You should always test things before using the methods to ensure the bot can load up fine. II: Avoid committing your token to GitHub if you use that. III: Do not copy your node_modules folder use npm install, it saves you time and allows the dependencies to be built correctly. If everything went okay this far, you're left with one issue. While the bot is online on your server, it's only running inside of the current SSH session. Once you end that session, the bot's process gets terminated with it. To prevent this from happening, here are a few different methods: 24/7 \u00b6 If you have successfully run the bot from the command line from above without any errors or issues then you should be ready to set up 24/7 bot hosting to keep the bot online. This has some advantages over simply running it in an SSH session: The bot runs in the background 24/7 unless it crashes. The Bot loads itself on reboot so no need to manually run it again. Easier to manage via CLI. You do not need to actively manage the bot. There are multiple ways to run the bot 24/7, feel free to choose the best method for you, personally I recommend pm2. Screen \u00b6 One way of achieving a 24/7 bot would be using screen to keep the bot running in the background Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your bot with screen, first, make sure you have screen package installed. Installation \u00b6 You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y Usage \u00b6 You can then start your bot by using the command below: screen -S <BotName> -L node x Hint Replace x with the correct filename for your bot, for example: screen -S aero -L node index.js This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your bot remains working after you leave. You can re-attach to the running screen by running screen -r BotName and then terminate the bot by using CTRL+C . systemd \u00b6 You can also use systemd as the service manager for your bot. Installation \u00b6 Systemd requires a service description file to be created. You can create it using your favorite editor and save it to /lib/systemd/system/bot.service : [Unit] Description = My Node JS Bot After = multi-user.target [Service] WorkingDirectory = /root/botFolder User = root ExecStart = /usr/bin/node index.js Type = simple Restart = always RestartSec = 15 [Install] WantedBy = multi-user.target You need to replace the proper path for the bot folder as well as the startup command. Assuming the bot files are on /root/bot the file will look like this for a discord.js bot: [Unit] Description = My wonderful bot After = multi-user.target [Service] WorkingDirectory = /root/bot User = root ExecStart = /usr/bin/node bot.js Type = simple Restart = always RestartSec = 15 [Install] WantedBy = multi-user.target After you finish creating the file, you need to run sudo systemctl daemon-reload which will tell systemd to re-scan for services. Usage \u00b6 Below are some command usages for systemd. sudo systemctl daemon-reload # Re-scans for service changes. sudo systemctl enable bot # Enables auto-start for the service named 'bot'. sudo systemctl start bot # Starts the 'bot' service. sudo systemctl stops bot # Stops the 'bot' service. sudo systemctl restart bot # Restarts the 'bot' service. PM2 \u00b6 PM2 is a process manager for the JavaScript runtime Node.js which can be used to keep node application alive after a killed SSH session. PM2 can easily start/stop/restart your bot as well as provide logging. Warning PM2 will restart when the bot crashes which can result in a boot loop. Installing PM2 \u00b6 Run the following commands... npm install pm2@latest -g Starting the bot \u00b6 pm2 start <botfile.js> note: Be in the same directory or use absolute paths. Commands \u00b6 To check the status pm2 ls To check logs pm2 logs 0 To enable systemd pm2 pm2 startup PM2 tips \u00b6 Use pm2 save to save the processes. Use pm2 resurrect to revive them in the event of a reboot and the processes did not come back. PM2 has a web app which can be found here. pm2 ls will show all the running node instances. PM2 commands can be found here Resources \u00b6 discord.js Docs discord.js GitHub discord.js Guide discord.js Discord discord.js Frameworks PM2 Docs","title":"JavaScript"},{"location":"hosting/discord/javascript/#hosting-a-discordjs-bot","text":"","title":"Hosting a Discord.js Bot"},{"location":"hosting/discord/javascript/#introduction","text":"In this article you will learn: What is needed to host a Discord.js Bot. How to keep the bot running after closing the SSH session. In this article, we assume that: You are using discord.js as your library You have confirmed that your bot is working locally. You know how to establish an SSH connection. You know how to use FTP/SFTP to upload files. You have a Linux VPS (Debian/Ubuntu). Don't know how to connect to your server? Check out this guide.","title":"Introduction"},{"location":"hosting/discord/javascript/#upgrading-packages","text":"To ensure we have a smoother experience we should install some packages which includes some commands we may or may not use in the guide please either make sure you are executing these as root/a user with sudo. apt update && apt upgrade -y apt install sudo screen curl unzip -y apt install curl dirmngr apt-transport-https lsb-release libgnutls30 ca-certificates -y Warning You should run this first, we use curl later on.","title":"Upgrading packages"},{"location":"hosting/discord/javascript/#installation","text":"","title":"Installation"},{"location":"hosting/discord/javascript/#nodejs","text":"For a JavaScript discord bot, you will need to have Node.js and npm installed on the server. To install Node.js & npm run the commands listed. You can choose which version to install if you have a preference however I recommend that you should choose v16. V17 curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash - sudo apt -y install nodejs V16 curl -sL https://deb.nodesource.com/setup_16.x | sudo -E bash - sudo apt -y install nodejs V12 curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash - sudo apt -y install nodejs v10 curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt -y install nodejs Verify that node is installed correctly. node -v npm -v If you do not get a response from above or something went wrong, please take a screenshot of what went wrong and ask for help in our support server.","title":"Node.js"},{"location":"hosting/discord/javascript/#getting-your-bot-onto-the-vps","text":"First, you should zip your bot folder ( don't zip your node_modules ) in preparation for what you should do next after you finish zipping your bot files with an SFTP client of your choice, you should upload the zipped file which should contain all your files to the server, you should also remember the name of the zipped file. Note Don't have an SFTP client? you can download one Here. unzip bot.zip cd botName npm install","title":"Getting your bot onto the VPS"},{"location":"hosting/discord/javascript/#running-the-bot","text":"You can now start your bot using node filename.js Note The filename would be the main node file e.g index.js , bot.js or Botname.js To exit hit Ctrl + C Warning I: You should always test things before using the methods to ensure the bot can load up fine. II: Avoid committing your token to GitHub if you use that. III: Do not copy your node_modules folder use npm install, it saves you time and allows the dependencies to be built correctly. If everything went okay this far, you're left with one issue. While the bot is online on your server, it's only running inside of the current SSH session. Once you end that session, the bot's process gets terminated with it. To prevent this from happening, here are a few different methods:","title":"Running the Bot"},{"location":"hosting/discord/javascript/#247","text":"If you have successfully run the bot from the command line from above without any errors or issues then you should be ready to set up 24/7 bot hosting to keep the bot online. This has some advantages over simply running it in an SSH session: The bot runs in the background 24/7 unless it crashes. The Bot loads itself on reboot so no need to manually run it again. Easier to manage via CLI. You do not need to actively manage the bot. There are multiple ways to run the bot 24/7, feel free to choose the best method for you, personally I recommend pm2.","title":"24/7"},{"location":"hosting/discord/javascript/#screen","text":"One way of achieving a 24/7 bot would be using screen to keep the bot running in the background Warning screen does not boot on load or write logs to the disk automatically, reboots would kill the screen due to only being a virtual session. To start your bot with screen, first, make sure you have screen package installed.","title":"Screen"},{"location":"hosting/discord/javascript/#installation_1","text":"You can install screen using the one-liner below: sudo apt update && sudo apt install screen -y","title":"Installation"},{"location":"hosting/discord/javascript/#usage","text":"You can then start your bot by using the command below: screen -S <BotName> -L node x Hint Replace x with the correct filename for your bot, for example: screen -S aero -L node index.js This should create a session you can safely leave without fear of it shutting down when you leave, You can leave the screen via CTRL+AD from this session so your bot remains working after you leave. You can re-attach to the running screen by running screen -r BotName and then terminate the bot by using CTRL+C .","title":"Usage"},{"location":"hosting/discord/javascript/#systemd","text":"You can also use systemd as the service manager for your bot.","title":"systemd"},{"location":"hosting/discord/javascript/#installation_2","text":"Systemd requires a service description file to be created. You can create it using your favorite editor and save it to /lib/systemd/system/bot.service : [Unit] Description = My Node JS Bot After = multi-user.target [Service] WorkingDirectory = /root/botFolder User = root ExecStart = /usr/bin/node index.js Type = simple Restart = always RestartSec = 15 [Install] WantedBy = multi-user.target You need to replace the proper path for the bot folder as well as the startup command. Assuming the bot files are on /root/bot the file will look like this for a discord.js bot: [Unit] Description = My wonderful bot After = multi-user.target [Service] WorkingDirectory = /root/bot User = root ExecStart = /usr/bin/node bot.js Type = simple Restart = always RestartSec = 15 [Install] WantedBy = multi-user.target After you finish creating the file, you need to run sudo systemctl daemon-reload which will tell systemd to re-scan for services.","title":"Installation"},{"location":"hosting/discord/javascript/#usage_1","text":"Below are some command usages for systemd. sudo systemctl daemon-reload # Re-scans for service changes. sudo systemctl enable bot # Enables auto-start for the service named 'bot'. sudo systemctl start bot # Starts the 'bot' service. sudo systemctl stops bot # Stops the 'bot' service. sudo systemctl restart bot # Restarts the 'bot' service.","title":"Usage"},{"location":"hosting/discord/javascript/#pm2","text":"PM2 is a process manager for the JavaScript runtime Node.js which can be used to keep node application alive after a killed SSH session. PM2 can easily start/stop/restart your bot as well as provide logging. Warning PM2 will restart when the bot crashes which can result in a boot loop.","title":"PM2"},{"location":"hosting/discord/javascript/#installing-pm2","text":"Run the following commands... npm install pm2@latest -g","title":"Installing PM2"},{"location":"hosting/discord/javascript/#starting-the-bot","text":"pm2 start <botfile.js> note: Be in the same directory or use absolute paths.","title":"Starting the bot"},{"location":"hosting/discord/javascript/#commands","text":"To check the status pm2 ls To check logs pm2 logs 0 To enable systemd pm2 pm2 startup","title":"Commands"},{"location":"hosting/discord/javascript/#pm2-tips","text":"Use pm2 save to save the processes. Use pm2 resurrect to revive them in the event of a reboot and the processes did not come back. PM2 has a web app which can be found here. pm2 ls will show all the running node instances. PM2 commands can be found here","title":"PM2 tips"},{"location":"hosting/discord/javascript/#resources","text":"discord.js Docs discord.js GitHub discord.js Guide discord.js Discord discord.js Frameworks PM2 Docs","title":"Resources"},{"location":"hosting/discord/python/","text":"Hosting a discord.py bot \u00b6 Introduction \u00b6 In this guide you will learn: What is needed to host a discord.py Bot. How to keep the bot running after closing the SSH session. In this guide, we assume that: You're logged in as root or using a sudo user. You are using discord.py as your library. You already have your bot's files uploaded to the server. You have confirmed your bot is working locally. Know how to establish an SSH connection. You have a Linux VPS (Debian/Ubuntu). Don't know how to connect to your server? Check out this guide. Installation \u00b6 In this section, we aim to install python3.8 to the server, note that debian users should be running these commands as root while ubuntu users can either use root or run these commands with sudo as a sudo user . Note Since Debian 8 and lower don't have the required Python version that discord.py requires. You can always use a tool like pyenv to easily compile and install any Python version that you want, however it won't be covered in this topic. For Ubuntu, you would do: sudo apt update sudo apt-get install software-properties-common -y sudo add-apt-repository ppa:deadsnakes/ppa -y sudo apt install python3.8 python3.8-dev python3.8-venv python3-pip -y For Debian, you would do: echo \"deb http://http.us.debian.org/debian/ testing non-free contrib main\" >> /etc/apt/sources.list apt update apt install python3 -y Congrats! You now have Python 3.8 installed with pip. Now we can install the required dependencies for the bot to run. Change to the path of your bot. cd discord_bot Note You should replace discord_bot with the folder you uploaded to the server Recommended: Create a virtual enviroment and activate it. python3.8 -m venv venv source venv/bin/activate Info A virtual environment, or most commonly referred to as a venv, is an isolated environment for projects so you don't have to worry about polluting the global namespace. See the official documentation for more information. You do not need to create a new one every time you start, modify or stop the bot. Install the discord.py package. pip install -U discord.py Note If you use discord.py's voice features, then i would suggest appending [voice] at the end of the command. Note To install from a requirements.txt file, simply run pip install -Ur requirements.txt instead. Running your bot \u00b6 We installed our required dependencies and there's only one last thing to do, run the bot. To run your bot you would simply do python bot.py Note If you use a file like launcher.py to start your bot, replace bot.py with that instead. Warning Encountering a ModuleNotFound: No module named 'discord' when trying to run the command above? Chances are you didn't activate the virtual environment or install the dependency. Now you can close your SSH client, but chances are is that your bot will stop which can be frustrating. Luckily, you can solve this by using a process manager such as systemd or a terminal multiplexer like screen to keep the session alive when you close your SSH connection. Read further down to learn how to utilize these programs. Systemd \u00b6 The most common init system you'll ever find on a Linux distro. To create and start editing a service file called my_bot , you would do nano /etc/systemd/system/my_bot.service Note Replace nano with the editor you choose, otherwise leave it be. Note Replace my_bot with the name of your bot We will just use this boilerplate for our bot, make sure you change this to the appropriate values. [Unit] Description = My Python Discord Bot After = multi-user.target [Service] WorkingDirectory = /root/discord_bot # This is where your bot's code lies User = root # Change user if you aren't using root # Activates your virtual environment and starts the bot # replace bot.py with whatever Python file that starts your bot ExecStart = /bin/bash -c \"source venv/bin/activate && python bot.py\" # This will restart your bot if your bot doesn't return a 0 exit code Restart = on-failure [Install] WantedBy = multi-user.target Note If you don't use virtual environments, then you can just reassign the ExecStart part to ExecStart=/usr/bin/python3.8 bot.py To save these changes in nano you would simply type CTRL-X to save your change, y to confirm the change, and Enter to write that change to /etc/systemd/system/my_bot.service Now you would enter this command to tell systemd to see your newly created or changed service files. systemctl daemon-reload To start your bot, you would execute systemctl start my_bot To stop your bot, you would execute systemctl stop my_bot To restart your bot, you would execute systemctl restart my_bot To start your bot on VPS start, you would simply do systemctl enable my_bot and to revoke that you would do systemctl disable my_bot Screen \u00b6 Most beginners would prefer this option as it's pretty straightforward, but it doesn't offer you the features a process manager would offer such as starting, stopping, and restarting your bot as systemd would. To create a session called my_bot , you would do screen -S my_bot Note Feel free to replace my_bot with something else. You may have noticed that it cleared your screen, which is completely normal. This session will stay here forever until you explicitly close it or if the server shuts down. In order to get your bot running, you must activate the virtual environment source venv/bin/activate Now, since you have your dependencies already installed and your virtual environment activated, you can start the bot with the following. python bot.py Note Replace bot.py with whatever file you use to start your bot Now you can simply disconnect from the session with CTRL A and D or just close the connection with your server. Congrats, your bot is running on a VPS without the need to keep your computer on. Now if you would like to re-attach to my_bot 's session you would simply enter screen -r my_bot Note If you used a different name don't forget to use that. screen -ls will also list all active screens. To detach from the bot's session without closing it you would simply hit CTRL A and D with your keyboard. To see how many screen sessions you have, simply enter screen -ls You should see a output similar to this equity@server:~$ screen -ls There is a screen on: 4146.my_bot (03/30/2020 12:09:15 AM) (Detached) 1 Socket in /run/screen/S-equity. equity@server:~$ Note The (Detached) on the far right means we aren't in the virtual session, otherwise it would be (Attached) Nohup \u00b6 On many Linux systems (if not all), including Ubuntu and Debian, you can use nohup to run your bot even after you have closed a session. To run nohup on your discord bot, you can do this, where bot.py is the name of your bot startup file. nohup python3.8 bot.py & This will create a file in your current directory called 'nohup.out'. You can redirect it to a file such as 'logs.txt' by running this instead: nohup python3.8 bot.py &> logs.txt & Tada! Your bot is online, and you can close the session without the bot dying. If you want to turn off the bot, things get a bit more complicated. You need to either get the PID of the bot's process, then kill it, or make a command in the bot for owners that calls os._exit(1) . In this section, we'll cover getting the PID of the bot's process. To get the PID of the bot, you can run this: $ ps -ef This will display a large list of running processes. You'll need to find the line that has \"python3 bot.py\" in the rightmost column, then find the PID of that line (it's in the second column). Once you have that PID, you can run kill <pid> , and the bot will gracefully free used memory, and shut off. Now, you can run the bot again :) Resources \u00b6 discord.py Docs discord.py GitHub discord.py Discord","title":"Python"},{"location":"hosting/discord/python/#hosting-a-discordpy-bot","text":"","title":"Hosting a discord.py bot"},{"location":"hosting/discord/python/#introduction","text":"In this guide you will learn: What is needed to host a discord.py Bot. How to keep the bot running after closing the SSH session. In this guide, we assume that: You're logged in as root or using a sudo user. You are using discord.py as your library. You already have your bot's files uploaded to the server. You have confirmed your bot is working locally. Know how to establish an SSH connection. You have a Linux VPS (Debian/Ubuntu). Don't know how to connect to your server? Check out this guide.","title":"Introduction"},{"location":"hosting/discord/python/#installation","text":"In this section, we aim to install python3.8 to the server, note that debian users should be running these commands as root while ubuntu users can either use root or run these commands with sudo as a sudo user . Note Since Debian 8 and lower don't have the required Python version that discord.py requires. You can always use a tool like pyenv to easily compile and install any Python version that you want, however it won't be covered in this topic. For Ubuntu, you would do: sudo apt update sudo apt-get install software-properties-common -y sudo add-apt-repository ppa:deadsnakes/ppa -y sudo apt install python3.8 python3.8-dev python3.8-venv python3-pip -y For Debian, you would do: echo \"deb http://http.us.debian.org/debian/ testing non-free contrib main\" >> /etc/apt/sources.list apt update apt install python3 -y Congrats! You now have Python 3.8 installed with pip. Now we can install the required dependencies for the bot to run. Change to the path of your bot. cd discord_bot Note You should replace discord_bot with the folder you uploaded to the server Recommended: Create a virtual enviroment and activate it. python3.8 -m venv venv source venv/bin/activate Info A virtual environment, or most commonly referred to as a venv, is an isolated environment for projects so you don't have to worry about polluting the global namespace. See the official documentation for more information. You do not need to create a new one every time you start, modify or stop the bot. Install the discord.py package. pip install -U discord.py Note If you use discord.py's voice features, then i would suggest appending [voice] at the end of the command. Note To install from a requirements.txt file, simply run pip install -Ur requirements.txt instead.","title":"Installation"},{"location":"hosting/discord/python/#running-your-bot","text":"We installed our required dependencies and there's only one last thing to do, run the bot. To run your bot you would simply do python bot.py Note If you use a file like launcher.py to start your bot, replace bot.py with that instead. Warning Encountering a ModuleNotFound: No module named 'discord' when trying to run the command above? Chances are you didn't activate the virtual environment or install the dependency. Now you can close your SSH client, but chances are is that your bot will stop which can be frustrating. Luckily, you can solve this by using a process manager such as systemd or a terminal multiplexer like screen to keep the session alive when you close your SSH connection. Read further down to learn how to utilize these programs.","title":"Running your bot"},{"location":"hosting/discord/python/#systemd","text":"The most common init system you'll ever find on a Linux distro. To create and start editing a service file called my_bot , you would do nano /etc/systemd/system/my_bot.service Note Replace nano with the editor you choose, otherwise leave it be. Note Replace my_bot with the name of your bot We will just use this boilerplate for our bot, make sure you change this to the appropriate values. [Unit] Description = My Python Discord Bot After = multi-user.target [Service] WorkingDirectory = /root/discord_bot # This is where your bot's code lies User = root # Change user if you aren't using root # Activates your virtual environment and starts the bot # replace bot.py with whatever Python file that starts your bot ExecStart = /bin/bash -c \"source venv/bin/activate && python bot.py\" # This will restart your bot if your bot doesn't return a 0 exit code Restart = on-failure [Install] WantedBy = multi-user.target Note If you don't use virtual environments, then you can just reassign the ExecStart part to ExecStart=/usr/bin/python3.8 bot.py To save these changes in nano you would simply type CTRL-X to save your change, y to confirm the change, and Enter to write that change to /etc/systemd/system/my_bot.service Now you would enter this command to tell systemd to see your newly created or changed service files. systemctl daemon-reload To start your bot, you would execute systemctl start my_bot To stop your bot, you would execute systemctl stop my_bot To restart your bot, you would execute systemctl restart my_bot To start your bot on VPS start, you would simply do systemctl enable my_bot and to revoke that you would do systemctl disable my_bot","title":"Systemd"},{"location":"hosting/discord/python/#screen","text":"Most beginners would prefer this option as it's pretty straightforward, but it doesn't offer you the features a process manager would offer such as starting, stopping, and restarting your bot as systemd would. To create a session called my_bot , you would do screen -S my_bot Note Feel free to replace my_bot with something else. You may have noticed that it cleared your screen, which is completely normal. This session will stay here forever until you explicitly close it or if the server shuts down. In order to get your bot running, you must activate the virtual environment source venv/bin/activate Now, since you have your dependencies already installed and your virtual environment activated, you can start the bot with the following. python bot.py Note Replace bot.py with whatever file you use to start your bot Now you can simply disconnect from the session with CTRL A and D or just close the connection with your server. Congrats, your bot is running on a VPS without the need to keep your computer on. Now if you would like to re-attach to my_bot 's session you would simply enter screen -r my_bot Note If you used a different name don't forget to use that. screen -ls will also list all active screens. To detach from the bot's session without closing it you would simply hit CTRL A and D with your keyboard. To see how many screen sessions you have, simply enter screen -ls You should see a output similar to this equity@server:~$ screen -ls There is a screen on: 4146.my_bot (03/30/2020 12:09:15 AM) (Detached) 1 Socket in /run/screen/S-equity. equity@server:~$ Note The (Detached) on the far right means we aren't in the virtual session, otherwise it would be (Attached)","title":"Screen"},{"location":"hosting/discord/python/#nohup","text":"On many Linux systems (if not all), including Ubuntu and Debian, you can use nohup to run your bot even after you have closed a session. To run nohup on your discord bot, you can do this, where bot.py is the name of your bot startup file. nohup python3.8 bot.py & This will create a file in your current directory called 'nohup.out'. You can redirect it to a file such as 'logs.txt' by running this instead: nohup python3.8 bot.py &> logs.txt & Tada! Your bot is online, and you can close the session without the bot dying. If you want to turn off the bot, things get a bit more complicated. You need to either get the PID of the bot's process, then kill it, or make a command in the bot for owners that calls os._exit(1) . In this section, we'll cover getting the PID of the bot's process. To get the PID of the bot, you can run this: $ ps -ef This will display a large list of running processes. You'll need to find the line that has \"python3 bot.py\" in the rightmost column, then find the PID of that line (it's in the second column). Once you have that PID, you can run kill <pid> , and the bot will gracefully free used memory, and shut off. Now, you can run the bot again :)","title":"Nohup"},{"location":"hosting/discord/python/#resources","text":"discord.py Docs discord.py GitHub discord.py Discord","title":"Resources"}]}